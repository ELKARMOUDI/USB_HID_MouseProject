
USB_HID_MOUSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006448  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080065e0  080065e0  000075e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006638  08006638  0000811c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006638  08006638  00007638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006640  08006640  0000811c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08006648  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  2000011c  08006764  0000811c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  08006764  00008b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000811c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c74c  00000000  00000000  0000814c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277f  00000000  00000000  00014898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00017018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000801  00000000  00000000  00017af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017886  00000000  00000000  000182f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df34  00000000  00000000  0002fb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e6e  00000000  00000000  0003dab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4921  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b2c  00000000  00000000  000c4964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c7490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000011c 	.word	0x2000011c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080065c8 	.word	0x080065c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000120 	.word	0x20000120
 80001d4:	080065c8 	.word	0x080065c8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:

extern USBD_HandleTypeDef hUsbDeviceFS;
uint8_t mouse_buffer[4];

int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

   HAL_Init();
 8000508:	f000 f970 	bl	80007ec <HAL_Init>

  SystemClock_Config();
 800050c:	f000 f826 	bl	800055c <SystemClock_Config>

  MX_GPIO_Init();
 8000510:	f000 f88c 	bl	800062c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000514:	f005 fbfe 	bl	8005d14 <MX_USB_DEVICE_Init>

  mouse_buffer[0]= 0; //click
 8000518:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <main+0x4c>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
  mouse_buffer[1]= 100; //x-motion
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <main+0x4c>)
 8000520:	2264      	movs	r2, #100	@ 0x64
 8000522:	705a      	strb	r2, [r3, #1]
  mouse_buffer[2]= 0;   //y-motion
 8000524:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <main+0x4c>)
 8000526:	2200      	movs	r2, #0
 8000528:	709a      	strb	r2, [r3, #2]
  mouse_buffer[3]= 0;   //wheel
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <main+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	70da      	strb	r2, [r3, #3]
  while (1)
  {
    if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)== GPIO_PIN_SET){
 8000530:	2101      	movs	r1, #1
 8000532:	4808      	ldr	r0, [pc, #32]	@ (8000554 <main+0x50>)
 8000534:	f000 fc86 	bl	8000e44 <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b01      	cmp	r3, #1
 800053c:	d1f8      	bne.n	8000530 <main+0x2c>

    	USBD_HID_SendReport(&hUsbDeviceFS,mouse_buffer,4);
 800053e:	2204      	movs	r2, #4
 8000540:	4903      	ldr	r1, [pc, #12]	@ (8000550 <main+0x4c>)
 8000542:	4805      	ldr	r0, [pc, #20]	@ (8000558 <main+0x54>)
 8000544:	f004 f844 	bl	80045d0 <USBD_HID_SendReport>
    	HAL_Delay(200);
 8000548:	20c8      	movs	r0, #200	@ 0xc8
 800054a:	f000 f9c1 	bl	80008d0 <HAL_Delay>
    if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)== GPIO_PIN_SET){
 800054e:	e7ef      	b.n	8000530 <main+0x2c>
 8000550:	20000138 	.word	0x20000138
 8000554:	40020000 	.word	0x40020000
 8000558:	20000144 	.word	0x20000144

0800055c <SystemClock_Config>:
    }

  }
}
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	@ 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f006 f800 	bl	8006570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a26      	ldr	r2, [pc, #152]	@ (8000624 <SystemClock_Config+0xc8>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b24      	ldr	r3, [pc, #144]	@ (8000624 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <SystemClock_Config+0xcc>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005d0:	2360      	movs	r3, #96	@ 0x60
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fe81 	bl	80022e8 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 f85a 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2103      	movs	r1, #3
 800060c:	4618      	mov	r0, r3
 800060e:	f002 f8e3 	bl	80027d8 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000618:	f000 f844 	bl	80006a4 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	@ 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_GPIO_Init+0x70>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a14      	ldr	r2, [pc, #80]	@ (800069c <MX_GPIO_Init+0x70>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_GPIO_Init+0x70>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_GPIO_Init+0x70>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <MX_GPIO_Init+0x70>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_GPIO_Init+0x70>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800067a:	2301      	movs	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0x74>)
 800068e:	f000 fa55 	bl	8000b3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000692:	bf00      	nop
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020000 	.word	0x40020000

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <Error_Handler+0x8>

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006be:	4a0f      	ldr	r2, [pc, #60]	@ (80006fc <HAL_MspInit+0x4c>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <HAL_MspInit+0x4c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_MspInit+0x4c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_MspInit+0x4c>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ee:	2007      	movs	r0, #7
 80006f0:	f000 f9e2 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <NMI_Handler+0x4>

08000708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <MemManage_Handler+0x4>

08000718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <UsageFault_Handler+0x4>

08000728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000756:	f000 f89b 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000764:	4802      	ldr	r0, [pc, #8]	@ (8000770 <OTG_FS_IRQHandler+0x10>)
 8000766:	f000 fcc9 	bl	80010fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000620 	.word	0x20000620

08000774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <SystemInit+0x20>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800077e:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <SystemInit+0x20>)
 8000780:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000798:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800079c:	f7ff ffea 	bl	8000774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	@ (80007d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	@ (80007e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f005 fedb 	bl	8006580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ca:	f7ff fe9b 	bl	8000504 <main>
  bx  lr    
 80007ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80007dc:	08006648 	.word	0x08006648
  ldr r2, =_sbss
 80007e0:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80007e4:	20000b18 	.word	0x20000b18

080007e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007f0:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <HAL_Init+0x40>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <HAL_Init+0x40>)
 80007f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <HAL_Init+0x40>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <HAL_Init+0x40>)
 8000802:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <HAL_Init+0x40>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a07      	ldr	r2, [pc, #28]	@ (800082c <HAL_Init+0x40>)
 800080e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 f94f 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f808 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000820:	f7ff ff46 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023c00 	.word	0x40023c00

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_InitTick+0x54>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <HAL_InitTick+0x58>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f967 	bl	8000b22 <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e00e      	b.n	800087c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d80a      	bhi.n	800087a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800086c:	f000 f92f 	bl	8000ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <HAL_InitTick+0x5c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_IncTick+0x20>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_IncTick+0x24>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <HAL_IncTick+0x24>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008
 80008b4:	2000013c 	.word	0x2000013c

080008b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return uwTick;
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <HAL_GetTick+0x14>)
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	2000013c 	.word	0x2000013c

080008d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d8:	f7ff ffee 	bl	80008b8 <HAL_GetTick>
 80008dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008e8:	d005      	beq.n	80008f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <HAL_Delay+0x44>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008f6:	bf00      	nop
 80008f8:	f7ff ffde 	bl	80008b8 <HAL_GetTick>
 80008fc:	4602      	mov	r2, r0
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	429a      	cmp	r2, r3
 8000906:	d8f7      	bhi.n	80008f8 <HAL_Delay+0x28>
  {
  }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000008 	.word	0x20000008

08000918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094a:	4a04      	ldr	r2, [pc, #16]	@ (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	60d3      	str	r3, [r2, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0b      	blt.n	80009a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 021f 	and.w	r2, r3, #31
 8000994:	4907      	ldr	r1, [pc, #28]	@ (80009b4 <__NVIC_EnableIRQ+0x38>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	2001      	movs	r0, #1
 800099e:	fa00 f202 	lsl.w	r2, r0, r2
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e100 	.word	0xe000e100

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	@ (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	@ (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	@ 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f1c3 0307 	rsb	r3, r3, #7
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	bf28      	it	cs
 8000a2a:	2304      	movcs	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d902      	bls.n	8000a3c <NVIC_EncodePriority+0x30>
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	e000      	b.n	8000a3e <NVIC_EncodePriority+0x32>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	43d9      	mvns	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	4313      	orrs	r3, r2
         );
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3724      	adds	r7, #36	@ 0x24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a98:	f7ff ff8e 	bl	80009b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff29 	bl	8000918 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae0:	f7ff ff3e 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff8e 	bl	8000a0c <NVIC_EncodePriority>
 8000af0:	4602      	mov	r2, r0
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5d 	bl	80009b8 <__NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff31 	bl	800097c <__NVIC_EnableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffa2 	bl	8000a74 <SysTick_Config>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	@ 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
 8000b56:	e159      	b.n	8000e0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b58:	2201      	movs	r2, #1
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f040 8148 	bne.w	8000e06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d005      	beq.n	8000b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d130      	bne.n	8000bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	091b      	lsrs	r3, r3, #4
 8000bda:	f003 0201 	and.w	r2, r3, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d017      	beq.n	8000c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d123      	bne.n	8000c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	08da      	lsrs	r2, r3, #3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3208      	adds	r2, #8
 8000c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	f003 0307 	and.w	r3, r3, #7
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	691a      	ldr	r2, [r3, #16]
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	08da      	lsrs	r2, r3, #3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3208      	adds	r2, #8
 8000c7a:	69b9      	ldr	r1, [r7, #24]
 8000c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0203 	and.w	r2, r3, #3
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 80a2 	beq.w	8000e06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b57      	ldr	r3, [pc, #348]	@ (8000e24 <HAL_GPIO_Init+0x2e8>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	4a56      	ldr	r2, [pc, #344]	@ (8000e24 <HAL_GPIO_Init+0x2e8>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cd2:	4b54      	ldr	r3, [pc, #336]	@ (8000e24 <HAL_GPIO_Init+0x2e8>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cde:	4a52      	ldr	r2, [pc, #328]	@ (8000e28 <HAL_GPIO_Init+0x2ec>)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a49      	ldr	r2, [pc, #292]	@ (8000e2c <HAL_GPIO_Init+0x2f0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d019      	beq.n	8000d3e <HAL_GPIO_Init+0x202>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a48      	ldr	r2, [pc, #288]	@ (8000e30 <HAL_GPIO_Init+0x2f4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x1fe>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a47      	ldr	r2, [pc, #284]	@ (8000e34 <HAL_GPIO_Init+0x2f8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x1fa>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a46      	ldr	r2, [pc, #280]	@ (8000e38 <HAL_GPIO_Init+0x2fc>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x1f6>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a45      	ldr	r2, [pc, #276]	@ (8000e3c <HAL_GPIO_Init+0x300>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x1f2>
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	e008      	b.n	8000d40 <HAL_GPIO_Init+0x204>
 8000d2e:	2307      	movs	r3, #7
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x204>
 8000d32:	2303      	movs	r3, #3
 8000d34:	e004      	b.n	8000d40 <HAL_GPIO_Init+0x204>
 8000d36:	2302      	movs	r3, #2
 8000d38:	e002      	b.n	8000d40 <HAL_GPIO_Init+0x204>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <HAL_GPIO_Init+0x204>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	69fa      	ldr	r2, [r7, #28]
 8000d42:	f002 0203 	and.w	r2, r2, #3
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	4093      	lsls	r3, r2
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d50:	4935      	ldr	r1, [pc, #212]	@ (8000e28 <HAL_GPIO_Init+0x2ec>)
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d5e:	4b38      	ldr	r3, [pc, #224]	@ (8000e40 <HAL_GPIO_Init+0x304>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d82:	4a2f      	ldr	r2, [pc, #188]	@ (8000e40 <HAL_GPIO_Init+0x304>)
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <HAL_GPIO_Init+0x304>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dac:	4a24      	ldr	r2, [pc, #144]	@ (8000e40 <HAL_GPIO_Init+0x304>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000db2:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <HAL_GPIO_Init+0x304>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e40 <HAL_GPIO_Init+0x304>)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_GPIO_Init+0x304>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e00:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <HAL_GPIO_Init+0x304>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	f67f aea2 	bls.w	8000b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3724      	adds	r7, #36	@ 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40013c00 	.word	0x40013c00

08000e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e001      	b.n	8000e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e101      	b.n	800108a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d106      	bne.n	8000ea6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f005 f86d 	bl	8005f80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eb4:	d102      	bne.n	8000ebc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 ff98 	bl	8002df6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7c1a      	ldrb	r2, [r3, #16]
 8000ece:	f88d 2000 	strb.w	r2, [sp]
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed6:	f001 fe77 	bl	8002bc8 <USB_CoreInit>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e0ce      	b.n	800108a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 ff90 	bl	8002e18 <USB_SetCurrentMode>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d005      	beq.n	8000f0a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2202      	movs	r2, #2
 8000f02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0bf      	b.n	800108a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e04a      	b.n	8000fa6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3315      	adds	r3, #21
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	3314      	adds	r3, #20
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	b298      	uxth	r0, r3
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	332e      	adds	r3, #46	@ 0x2e
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3318      	adds	r3, #24
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	331c      	adds	r3, #28
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	3320      	adds	r3, #32
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	3324      	adds	r3, #36	@ 0x24
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3af      	bcc.n	8000f10 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e044      	b.n	8001040 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	3301      	adds	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3b5      	bcc.n	8000fb6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7c1a      	ldrb	r2, [r3, #16]
 8001052:	f88d 2000 	strb.w	r2, [sp]
 8001056:	3304      	adds	r3, #4
 8001058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800105a:	f001 ff29 	bl	8002eb0 <USB_DevInit>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e00c      	b.n	800108a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f002 ff73 	bl	8003f6e <USB_DevDisconnect>

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_PCD_Start+0x1c>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e022      	b.n	80010f4 <HAL_PCD_Start+0x62>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d009      	beq.n	80010d6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d105      	bne.n	80010d6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 fe7a 	bl	8002dd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 ff21 	bl	8003f2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b08d      	sub	sp, #52	@ 0x34
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f002 ffdf 	bl	80040d6 <USB_GetMode>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	f040 848c 	bne.w	8001a38 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f002 ff43 	bl	8003fb0 <USB_ReadInterrupts>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 8482 	beq.w	8001a36 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f002 ff30 	bl	8003fb0 <USB_ReadInterrupts>
 8001150:	4603      	mov	r3, r0
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b02      	cmp	r3, #2
 8001158:	d107      	bne.n	800116a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f002 0202 	and.w	r2, r2, #2
 8001168:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f002 ff1e 	bl	8003fb0 <USB_ReadInterrupts>
 8001174:	4603      	mov	r3, r0
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	2b10      	cmp	r3, #16
 800117c:	d161      	bne.n	8001242 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0210 	bic.w	r2, r2, #16
 800118c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	f003 020f 	and.w	r2, r3, #15
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	3304      	adds	r3, #4
 80011ac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80011b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80011b8:	d124      	bne.n	8001204 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d035      	beq.n	8001232 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	6a38      	ldr	r0, [r7, #32]
 80011da:	f002 fd55 	bl	8003c88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ea:	441a      	add	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fc:	441a      	add	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	e016      	b.n	8001232 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800120a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800120e:	d110      	bne.n	8001232 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001216:	2208      	movs	r2, #8
 8001218:	4619      	mov	r1, r3
 800121a:	6a38      	ldr	r0, [r7, #32]
 800121c:	f002 fd34 	bl	8003c88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800122c:	441a      	add	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	699a      	ldr	r2, [r3, #24]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0210 	orr.w	r2, r2, #16
 8001240:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f002 feb2 	bl	8003fb0 <USB_ReadInterrupts>
 800124c:	4603      	mov	r3, r0
 800124e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001252:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001256:	f040 80a7 	bne.w	80013a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f002 feb7 	bl	8003fd6 <USB_ReadDevAllOutEpInterrupt>
 8001268:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800126a:	e099      	b.n	80013a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800126c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 808e 	beq.w	8001394 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fedb 	bl	800403e <USB_ReadDevOutEPInterrupt>
 8001288:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00c      	beq.n	80012ae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	015a      	lsls	r2, r3, #5
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012a0:	461a      	mov	r2, r3
 80012a2:	2301      	movs	r3, #1
 80012a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 fe8b 	bl	8001fc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00c      	beq.n	80012d2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	015a      	lsls	r2, r3, #5
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	4413      	add	r3, r2
 80012c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012c4:	461a      	mov	r2, r3
 80012c6:	2308      	movs	r3, #8
 80012c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 ff61 	bl	8002194 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012e8:	461a      	mov	r2, r3
 80012ea:	2310      	movs	r3, #16
 80012ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d030      	beq.n	800135a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001300:	2b80      	cmp	r3, #128	@ 0x80
 8001302:	d109      	bne.n	8001318 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001312:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001316:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800131a:	4613      	mov	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	3304      	adds	r3, #4
 800132c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	78db      	ldrb	r3, [r3, #3]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2200      	movs	r2, #0
 800133a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4619      	mov	r1, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f004 ff18 	bl	8006178 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	015a      	lsls	r2, r3, #5
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	4413      	add	r3, r2
 8001350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001354:	461a      	mov	r2, r3
 8001356:	2302      	movs	r3, #2
 8001358:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	015a      	lsls	r2, r3, #5
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	4413      	add	r3, r2
 800136c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001370:	461a      	mov	r2, r3
 8001372:	2320      	movs	r3, #32
 8001374:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d009      	beq.n	8001394 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	015a      	lsls	r2, r3, #5
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	4413      	add	r3, r2
 8001388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800138c:	461a      	mov	r2, r3
 800138e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001392:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001396:	3301      	adds	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800139a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80013a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f47f af62 	bne.w	800126c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fdff 	bl	8003fb0 <USB_ReadInterrupts>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013bc:	f040 80db 	bne.w	8001576 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fe20 	bl	800400a <USB_ReadDevAllInEpInterrupt>
 80013ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80013d0:	e0cd      	b.n	800156e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80c2 	beq.w	8001562 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fe46 	bl	800407a <USB_ReadDevInEPInterrupt>
 80013ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d057      	beq.n	80014aa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	2201      	movs	r2, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800140e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	43db      	mvns	r3, r3
 8001414:	69f9      	ldr	r1, [r7, #28]
 8001416:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800141a:	4013      	ands	r3, r2
 800141c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	015a      	lsls	r2, r3, #5
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	4413      	add	r3, r2
 8001426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800142a:	461a      	mov	r2, r3
 800142c:	2301      	movs	r3, #1
 800142e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	799b      	ldrb	r3, [r3, #6]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d132      	bne.n	800149e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	3320      	adds	r3, #32
 8001448:	6819      	ldr	r1, [r3, #0]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4403      	add	r3, r0
 8001458:	331c      	adds	r3, #28
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4419      	add	r1, r3
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4403      	add	r3, r0
 800146c:	3320      	adds	r3, #32
 800146e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	2b00      	cmp	r3, #0
 8001474:	d113      	bne.n	800149e <HAL_PCD_IRQHandler+0x3a2>
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	3324      	adds	r3, #36	@ 0x24
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d108      	bne.n	800149e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001496:	461a      	mov	r2, r3
 8001498:	2101      	movs	r1, #1
 800149a:	f002 fe4d 	bl	8004138 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f004 fdec 	bl	8006082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014c0:	461a      	mov	r2, r3
 80014c2:	2308      	movs	r3, #8
 80014c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014dc:	461a      	mov	r2, r3
 80014de:	2310      	movs	r3, #16
 80014e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014f8:	461a      	mov	r2, r3
 80014fa:	2340      	movs	r3, #64	@ 0x40
 80014fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d023      	beq.n	8001550 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001508:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800150a:	6a38      	ldr	r0, [r7, #32]
 800150c:	f001 fe34 	bl	8003178 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	3310      	adds	r3, #16
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	3304      	adds	r3, #4
 8001522:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	78db      	ldrb	r3, [r3, #3]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2200      	movs	r2, #0
 8001530:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f004 fe2f 	bl	800619c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001540:	015a      	lsls	r2, r3, #5
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800154a:	461a      	mov	r2, r3
 800154c:	2302      	movs	r3, #2
 800154e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800155a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 fca5 	bl	8001eac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	3301      	adds	r3, #1
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800156e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001570:	2b00      	cmp	r3, #0
 8001572:	f47f af2e 	bne.w	80013d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fd18 	bl	8003fb0 <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800158a:	d122      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d108      	bne.n	80015bc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015b2:	2100      	movs	r1, #0
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fe8b 	bl	80022d0 <HAL_PCDEx_LPM_Callback>
 80015ba:	e002      	b.n	80015c2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f004 fdcd 	bl	800615c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80015d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 fcea 	bl	8003fb0 <USB_ReadInterrupts>
 80015dc:	4603      	mov	r3, r0
 80015de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015e6:	d112      	bne.n	800160e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d102      	bne.n	80015fe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f004 fd89 	bl	8006110 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800160c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fccc 	bl	8003fb0 <USB_ReadInterrupts>
 8001618:	4603      	mov	r3, r0
 800161a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800161e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001622:	f040 80b7 	bne.w	8001794 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2110      	movs	r1, #16
 8001640:	4618      	mov	r0, r3
 8001642:	f001 fd99 	bl	8003178 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001646:	2300      	movs	r3, #0
 8001648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164a:	e046      	b.n	80016da <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800164c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001658:	461a      	mov	r2, r3
 800165a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800165e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001662:	015a      	lsls	r2, r3, #5
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001670:	0151      	lsls	r1, r2, #5
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	440a      	add	r2, r1
 8001676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800167a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800167e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800168c:	461a      	mov	r2, r3
 800168e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001692:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4413      	add	r3, r2
 800169c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016a4:	0151      	lsls	r1, r2, #5
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	440a      	add	r2, r1
 80016aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80016ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c4:	0151      	lsls	r1, r2, #5
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	440a      	add	r2, r1
 80016ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80016ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d6:	3301      	adds	r3, #1
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	791b      	ldrb	r3, [r3, #4]
 80016de:	461a      	mov	r2, r3
 80016e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d3b2      	bcc.n	800164c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016f4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80016f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7bdb      	ldrb	r3, [r3, #15]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d016      	beq.n	8001730 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001712:	f043 030b 	orr.w	r3, r3, #11
 8001716:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001728:	f043 030b 	orr.w	r3, r3, #11
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	e015      	b.n	800175c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800173e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001742:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001746:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001756:	f043 030b 	orr.w	r3, r3, #11
 800175a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800176a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800176e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800177e:	461a      	mov	r2, r3
 8001780:	f002 fcda 	bl	8004138 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f002 fc09 	bl	8003fb0 <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017a8:	d123      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fc9f 	bl	80040f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 fd56 	bl	800326a <USB_GetDevSpeed>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681c      	ldr	r4, [r3, #0]
 80017ca:	f001 f9f1 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 80017ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017d4:	461a      	mov	r2, r3
 80017d6:	4620      	mov	r0, r4
 80017d8:	f001 fa5a 	bl	8002c90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f004 fc78 	bl	80060d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80017f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fbda 	bl	8003fb0 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b08      	cmp	r3, #8
 8001804:	d10a      	bne.n	800181c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f004 fc55 	bl	80060b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f002 0208 	and.w	r2, r2, #8
 800181a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fbc5 	bl	8003fb0 <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182c:	2b80      	cmp	r3, #128	@ 0x80
 800182e:	d123      	bne.n	8001878 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800183c:	2301      	movs	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001840:	e014      	b.n	800186c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d105      	bne.n	8001866 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 faf2 	bl	8001e4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	461a      	mov	r2, r3
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	4293      	cmp	r3, r2
 8001876:	d3e4      	bcc.n	8001842 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fb97 	bl	8003fb0 <USB_ReadInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001888:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800188c:	d13c      	bne.n	8001908 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800188e:	2301      	movs	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
 8001892:	e02b      	b.n	80018ec <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3318      	adds	r3, #24
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d115      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018bc:	2b00      	cmp	r3, #0
 80018be:	da12      	bge.n	80018e6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	3317      	adds	r3, #23
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4619      	mov	r1, r3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fab2 	bl	8001e4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	3301      	adds	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	461a      	mov	r2, r3
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d3cd      	bcc.n	8001894 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fb4f 	bl	8003fb0 <USB_ReadInterrupts>
 8001912:	4603      	mov	r3, r0
 8001914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001918:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800191c:	d156      	bne.n	80019cc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800191e:	2301      	movs	r3, #1
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
 8001922:	e045      	b.n	80019b0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	4413      	add	r3, r2
 800192c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d12e      	bne.n	80019aa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800194c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	da2b      	bge.n	80019aa <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	0c1a      	lsrs	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800195c:	4053      	eors	r3, r2
 800195e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001962:	2b00      	cmp	r3, #0
 8001964:	d121      	bne.n	80019aa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a6:	6053      	str	r3, [r2, #4]
            break;
 80019a8:	e008      	b.n	80019bc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	461a      	mov	r2, r3
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d3b3      	bcc.n	8001924 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80019ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 faed 	bl	8003fb0 <USB_ReadInterrupts>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80019dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e0:	d10a      	bne.n	80019f8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f004 fbec 	bl	80061c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80019f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fad7 	bl	8003fb0 <USB_ReadInterrupts>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d115      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f004 fbdc 	bl	80061dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6859      	ldr	r1, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	e000      	b.n	8001a38 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001a36:	bf00      	nop
    }
  }
}
 8001a38:	3734      	adds	r7, #52	@ 0x34
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}

08001a3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_PCD_SetAddress+0x1a>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e012      	b.n	8001a7e <HAL_PCD_SetAddress+0x40>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fa36 	bl	8003ee0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	4608      	mov	r0, r1
 8001a90:	4611      	mov	r1, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	4603      	mov	r3, r0
 8001a96:	70fb      	strb	r3, [r7, #3]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	803b      	strh	r3, [r7, #0]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da0f      	bge.n	8001acc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 020f 	and.w	r2, r3, #15
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	3310      	adds	r3, #16
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	705a      	strb	r2, [r3, #1]
 8001aca:	e00f      	b.n	8001aec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 020f 	and.w	r2, r3, #15
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001af8:	883b      	ldrh	r3, [r7, #0]
 8001afa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	78ba      	ldrb	r2, [r7, #2]
 8001b06:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	785b      	ldrb	r3, [r3, #1]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b1a:	78bb      	ldrb	r3, [r7, #2]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d102      	bne.n	8001b26 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_PCD_EP_Open+0xae>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e00e      	b.n	8001b52 <HAL_PCD_EP_Open+0xcc>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 fbb6 	bl	80032b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001b50:	7afb      	ldrb	r3, [r7, #11]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da0f      	bge.n	8001b8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	f003 020f 	and.w	r2, r3, #15
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	3310      	adds	r3, #16
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	3304      	adds	r3, #4
 8001b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	705a      	strb	r2, [r3, #1]
 8001b8c:	e00f      	b.n	8001bae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	f003 020f 	and.w	r2, r3, #15
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_PCD_EP_Close+0x6e>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e00e      	b.n	8001be6 <HAL_PCD_EP_Close+0x8c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fbf4 	bl	80033c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	f003 020f 	and.w	r2, r3, #15
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	3304      	adds	r3, #4
 8001c16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	799b      	ldrb	r3, [r3, #6]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d102      	bne.n	8001c4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	799b      	ldrb	r3, [r3, #6]
 8001c52:	461a      	mov	r2, r3
 8001c54:	6979      	ldr	r1, [r7, #20]
 8001c56:	f001 fc91 	bl	800357c <USB_EPStartXfer>

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	460b      	mov	r3, r1
 8001c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	f003 020f 	and.w	r2, r3, #15
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	3310      	adds	r3, #16
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	3304      	adds	r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	799b      	ldrb	r3, [r3, #6]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d102      	bne.n	8001cbe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	799b      	ldrb	r3, [r3, #6]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6979      	ldr	r1, [r7, #20]
 8001cca:	f001 fc57 	bl	800357c <USB_EPStartXfer>

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	7912      	ldrb	r2, [r2, #4]
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e04f      	b.n	8001d96 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da0f      	bge.n	8001d1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	705a      	strb	r2, [r3, #1]
 8001d1c:	e00d      	b.n	8001d3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	3304      	adds	r3, #4
 8001d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_PCD_EP_SetStall+0x82>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e01d      	b.n	8001d96 <HAL_PCD_EP_SetStall+0xbe>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68f9      	ldr	r1, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 ffe5 	bl	8003d38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7999      	ldrb	r1, [r3, #6]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d86:	461a      	mov	r2, r3
 8001d88:	f002 f9d6 	bl	8004138 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	7912      	ldrb	r2, [r2, #4]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e042      	b.n	8001e42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da0f      	bge.n	8001de4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	f003 020f 	and.w	r2, r3, #15
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	3310      	adds	r3, #16
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	705a      	strb	r2, [r3, #1]
 8001de2:	e00f      	b.n	8001e04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	f003 020f 	and.w	r2, r3, #15
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_PCD_EP_ClrStall+0x86>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e00e      	b.n	8001e42 <HAL_PCD_EP_ClrStall+0xa4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68f9      	ldr	r1, [r7, #12]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 ffee 	bl	8003e14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da0c      	bge.n	8001e78 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 020f 	and.w	r2, r3, #15
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	3310      	adds	r3, #16
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	3304      	adds	r3, #4
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	e00c      	b.n	8001e92 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 fe0d 	bl	8003ab8 <USB_EPStopXfer>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	@ 0x28
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3310      	adds	r3, #16
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d901      	bls.n	8001ee4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e06b      	b.n	8001fbc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d902      	bls.n	8001f00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	3303      	adds	r3, #3
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f08:	e02a      	b.n	8001f60 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d902      	bls.n	8001f26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3303      	adds	r3, #3
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	68d9      	ldr	r1, [r3, #12]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	4603      	mov	r3, r0
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f001 fe62 	bl	8003c0c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	441a      	add	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	441a      	add	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d809      	bhi.n	8001f8a <PCD_WriteEmptyTxFifo+0xde>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d203      	bcs.n	8001f8a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1bf      	bne.n	8001f0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d811      	bhi.n	8001fba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	6939      	ldr	r1, [r7, #16]
 8001fb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	333c      	adds	r3, #60	@ 0x3c
 8001fdc:	3304      	adds	r3, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	799b      	ldrb	r3, [r3, #6]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d17b      	bne.n	80020f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4a61      	ldr	r2, [pc, #388]	@ (800218c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	f240 80b9 	bls.w	8002180 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80b3 	beq.w	8002180 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002026:	461a      	mov	r2, r3
 8002028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800202c:	6093      	str	r3, [r2, #8]
 800202e:	e0a7      	b.n	8002180 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002046:	461a      	mov	r2, r3
 8002048:	2320      	movs	r3, #32
 800204a:	6093      	str	r3, [r2, #8]
 800204c:	e098      	b.n	8002180 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 8093 	bne.w	8002180 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4a4b      	ldr	r2, [pc, #300]	@ (800218c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d90f      	bls.n	8002082 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	4413      	add	r3, r2
 8002074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002078:	461a      	mov	r2, r3
 800207a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800207e:	6093      	str	r3, [r2, #8]
 8002080:	e07e      	b.n	8002180 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a1a      	ldr	r2, [r3, #32]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	0159      	lsls	r1, r3, #5
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	440b      	add	r3, r1
 80020a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d114      	bne.n	80020e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020cc:	461a      	mov	r2, r3
 80020ce:	2101      	movs	r1, #1
 80020d0:	f002 f832 	bl	8004138 <USB_EP0_OutStart>
 80020d4:	e006      	b.n	80020e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	441a      	add	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f003 ffae 	bl	800604c <HAL_PCD_DataOutStageCallback>
 80020f0:	e046      	b.n	8002180 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a26      	ldr	r2, [pc, #152]	@ (8002190 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d124      	bne.n	8002144 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002110:	461a      	mov	r2, r3
 8002112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002116:	6093      	str	r3, [r2, #8]
 8002118:	e032      	b.n	8002180 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002130:	461a      	mov	r2, r3
 8002132:	2320      	movs	r3, #32
 8002134:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f003 ff85 	bl	800604c <HAL_PCD_DataOutStageCallback>
 8002142:	e01d      	b.n	8002180 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d114      	bne.n	8002174 <PCD_EP_OutXfrComplete_int+0x1b0>
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d108      	bne.n	8002174 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800216c:	461a      	mov	r2, r3
 800216e:	2100      	movs	r1, #0
 8002170:	f001 ffe2 	bl	8004138 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f003 ff66 	bl	800604c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	4f54300a 	.word	0x4f54300a
 8002190:	4f54310a 	.word	0x4f54310a

08002194 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	333c      	adds	r3, #60	@ 0x3c
 80021ac:	3304      	adds	r3, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a15      	ldr	r2, [pc, #84]	@ (800221c <PCD_EP_OutSetupPacket_int+0x88>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d90e      	bls.n	80021e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e0:	461a      	mov	r2, r3
 80021e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f003 ff1d 	bl	8006028 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <PCD_EP_OutSetupPacket_int+0x88>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d90c      	bls.n	8002210 <PCD_EP_OutSetupPacket_int+0x7c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	799b      	ldrb	r3, [r3, #6]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d108      	bne.n	8002210 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002208:	461a      	mov	r2, r3
 800220a:	2101      	movs	r1, #1
 800220c:	f001 ff94 	bl	8004138 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	4f54300a 	.word	0x4f54300a

08002220 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
 800222c:	4613      	mov	r3, r2
 800222e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d107      	bne.n	800224e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800223e:	883b      	ldrh	r3, [r7, #0]
 8002240:	0419      	lsls	r1, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	430a      	orrs	r2, r1
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
 800224c:	e028      	b.n	80022a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4413      	add	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e00d      	b.n	800227e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	3340      	adds	r3, #64	@ 0x40
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4413      	add	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	3301      	adds	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	3b01      	subs	r3, #1
 8002284:	429a      	cmp	r2, r3
 8002286:	d3ec      	bcc.n	8002262 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002288:	883b      	ldrh	r3, [r7, #0]
 800228a:	0418      	lsls	r0, r3, #16
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	3b01      	subs	r3, #1
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	4302      	orrs	r2, r0
 8002298:	3340      	adds	r3, #64	@ 0x40
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e267      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002306:	4b88      	ldr	r3, [pc, #544]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4b85      	ldr	r3, [pc, #532]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800231a:	2b08      	cmp	r3, #8
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b82      	ldr	r3, [pc, #520]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b7e      	ldr	r3, [pc, #504]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x108>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e242      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x74>
 800234e:	4b76      	ldr	r3, [pc, #472]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a75      	ldr	r2, [pc, #468]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b70      	ldr	r3, [pc, #448]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a6f      	ldr	r2, [pc, #444]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b6d      	ldr	r3, [pc, #436]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6c      	ldr	r2, [pc, #432]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 8002380:	4b69      	ldr	r3, [pc, #420]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a68      	ldr	r2, [pc, #416]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b66      	ldr	r3, [pc, #408]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a65      	ldr	r2, [pc, #404]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fa8a 	bl	80008b8 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fa86 	bl	80008b8 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e207      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xc0>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fa76 	bl	80008b8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fa72 	bl	80008b8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1f3      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b51      	ldr	r3, [pc, #324]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe8>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b47      	ldr	r3, [pc, #284]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b44      	ldr	r3, [pc, #272]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1c7      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4937      	ldr	r1, [pc, #220]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b34      	ldr	r3, [pc, #208]	@ (800252c <HAL_RCC_OscConfig+0x244>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fa2b 	bl	80008b8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fa27 	bl	80008b8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1a8      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b2b      	ldr	r3, [pc, #172]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b28      	ldr	r3, [pc, #160]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4925      	ldr	r1, [pc, #148]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b24      	ldr	r3, [pc, #144]	@ (800252c <HAL_RCC_OscConfig+0x244>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fa0a 	bl	80008b8 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a8:	f7fe fa06 	bl	80008b8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e187      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d036      	beq.n	8002540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_RCC_OscConfig+0x248>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7fe f9ea 	bl	80008b8 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe f9e6 	bl	80008b8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e167      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x200>
 8002506:	e01b      	b.n	8002540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_RCC_OscConfig+0x248>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe f9d3 	bl	80008b8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	e00e      	b.n	8002534 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002516:	f7fe f9cf 	bl	80008b8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d907      	bls.n	8002534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e150      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
 8002528:	40023800 	.word	0x40023800
 800252c:	42470000 	.word	0x42470000
 8002530:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	4b88      	ldr	r3, [pc, #544]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ea      	bne.n	8002516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8097 	beq.w	800267c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002552:	4b81      	ldr	r3, [pc, #516]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	4b7d      	ldr	r3, [pc, #500]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a7c      	ldr	r2, [pc, #496]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
 800256e:	4b7a      	ldr	r3, [pc, #488]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b77      	ldr	r3, [pc, #476]	@ (800275c <HAL_RCC_OscConfig+0x474>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b74      	ldr	r3, [pc, #464]	@ (800275c <HAL_RCC_OscConfig+0x474>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a73      	ldr	r2, [pc, #460]	@ (800275c <HAL_RCC_OscConfig+0x474>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7fe f98f 	bl	80008b8 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe f98b 	bl	80008b8 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e10c      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b6a      	ldr	r3, [pc, #424]	@ (800275c <HAL_RCC_OscConfig+0x474>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2ea>
 80025c4:	4b64      	ldr	r3, [pc, #400]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	4a63      	ldr	r2, [pc, #396]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d0:	e01c      	b.n	800260c <HAL_RCC_OscConfig+0x324>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x30c>
 80025da:	4b5f      	ldr	r3, [pc, #380]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	4a5e      	ldr	r2, [pc, #376]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0x324>
 80025f4:	4b58      	ldr	r3, [pc, #352]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f8:	4a57      	ldr	r2, [pc, #348]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002600:	4b55      	ldr	r3, [pc, #340]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	4a54      	ldr	r2, [pc, #336]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d015      	beq.n	8002640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7fe f950 	bl	80008b8 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7fe f94c 	bl	80008b8 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0cb      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0ee      	beq.n	800261c <HAL_RCC_OscConfig+0x334>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7fe f93a 	bl	80008b8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002646:	e00a      	b.n	800265e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002648:	f7fe f936 	bl	80008b8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e0b5      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265e:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ee      	bne.n	8002648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002670:	4b39      	ldr	r3, [pc, #228]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	4a38      	ldr	r2, [pc, #224]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800267a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a1 	beq.w	80027c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002686:	4b34      	ldr	r3, [pc, #208]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b08      	cmp	r3, #8
 8002690:	d05c      	beq.n	800274c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d141      	bne.n	800271e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <HAL_RCC_OscConfig+0x478>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe f90a 	bl	80008b8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe f906 	bl	80008b8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e087      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	3b01      	subs	r3, #1
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	491b      	ldr	r1, [pc, #108]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_RCC_OscConfig+0x478>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe f8df 	bl	80008b8 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe f8db 	bl	80008b8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e05c      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x416>
 800271c:	e054      	b.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <HAL_RCC_OscConfig+0x478>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe f8c8 	bl	80008b8 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe f8c4 	bl	80008b8 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e045      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x444>
 800274a:	e03d      	b.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e038      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
 8002758:	40023800 	.word	0x40023800
 800275c:	40007000 	.word	0x40007000
 8002760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x4ec>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d028      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d121      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d11a      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002794:	4013      	ands	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800279a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800279c:	4293      	cmp	r3, r2
 800279e:	d111      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	3b01      	subs	r3, #1
 80027ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0cc      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b68      	ldr	r3, [pc, #416]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d90c      	bls.n	8002814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b65      	ldr	r3, [pc, #404]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0b8      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800282c:	4b59      	ldr	r3, [pc, #356]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a58      	ldr	r2, [pc, #352]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002836:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002844:	4b53      	ldr	r3, [pc, #332]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a52      	ldr	r2, [pc, #328]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800284e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b50      	ldr	r3, [pc, #320]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	494d      	ldr	r1, [pc, #308]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d044      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b47      	ldr	r3, [pc, #284]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d119      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d003      	beq.n	8002896 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	2b03      	cmp	r3, #3
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b3f      	ldr	r3, [pc, #252]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e067      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b37      	ldr	r3, [pc, #220]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4934      	ldr	r1, [pc, #208]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7fd fff6 	bl	80008b8 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fd fff2 	bl	80008b8 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e04f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b25      	ldr	r3, [pc, #148]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d20c      	bcs.n	8002920 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e032      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292c:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4916      	ldr	r1, [pc, #88]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	490e      	ldr	r1, [pc, #56]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800295e:	f000 f821 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002962:	4602      	mov	r2, r0
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	490a      	ldr	r1, [pc, #40]	@ (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	5ccb      	ldrb	r3, [r1, r3]
 8002972:	fa22 f303 	lsr.w	r3, r2, r3
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd ff56 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023c00 	.word	0x40023c00
 8002994:	40023800 	.word	0x40023800
 8002998:	08006628 	.word	0x08006628
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000004 	.word	0x20000004

080029a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a8:	b094      	sub	sp, #80	@ 0x50
 80029aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029bc:	4b79      	ldr	r3, [pc, #484]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d00d      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x40>
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	f200 80e1 	bhi.w	8002b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x34>
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d003      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x3a>
 80029d6:	e0db      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d8:	4b73      	ldr	r3, [pc, #460]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029dc:	e0db      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029de:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x208>)
 80029e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e2:	e0d8      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ee:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	099b      	lsrs	r3, r3, #6
 8002a00:	2200      	movs	r2, #0
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a16:	4622      	mov	r2, r4
 8002a18:	462b      	mov	r3, r5
 8002a1a:	f04f 0000 	mov.w	r0, #0
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	0159      	lsls	r1, r3, #5
 8002a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a28:	0150      	lsls	r0, r2, #5
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4621      	mov	r1, r4
 8002a30:	1a51      	subs	r1, r2, r1
 8002a32:	6139      	str	r1, [r7, #16]
 8002a34:	4629      	mov	r1, r5
 8002a36:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a48:	4659      	mov	r1, fp
 8002a4a:	018b      	lsls	r3, r1, #6
 8002a4c:	4651      	mov	r1, sl
 8002a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a52:	4651      	mov	r1, sl
 8002a54:	018a      	lsls	r2, r1, #6
 8002a56:	4651      	mov	r1, sl
 8002a58:	ebb2 0801 	subs.w	r8, r2, r1
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a76:	4690      	mov	r8, r2
 8002a78:	4699      	mov	r9, r3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	eb18 0303 	adds.w	r3, r8, r3
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	462b      	mov	r3, r5
 8002a84:	eb49 0303 	adc.w	r3, r9, r3
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a96:	4629      	mov	r1, r5
 8002a98:	024b      	lsls	r3, r1, #9
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	024a      	lsls	r2, r1, #9
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aaa:	2200      	movs	r2, #0
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ab4:	f7fd fb90 	bl	80001d8 <__aeabi_uldivmod>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4613      	mov	r3, r2
 8002abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac0:	e058      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac2:	4b38      	ldr	r3, [pc, #224]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	4611      	mov	r1, r2
 8002ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ad2:	623b      	str	r3, [r7, #32]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	0159      	lsls	r1, r3, #5
 8002aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aee:	0150      	lsls	r0, r2, #5
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4641      	mov	r1, r8
 8002af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002afa:	4649      	mov	r1, r9
 8002afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b14:	ebb2 040a 	subs.w	r4, r2, sl
 8002b18:	eb63 050b 	sbc.w	r5, r3, fp
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	00eb      	lsls	r3, r5, #3
 8002b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2a:	00e2      	lsls	r2, r4, #3
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	4643      	mov	r3, r8
 8002b32:	18e3      	adds	r3, r4, r3
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	464b      	mov	r3, r9
 8002b38:	eb45 0303 	adc.w	r3, r5, r3
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	028b      	lsls	r3, r1, #10
 8002b4e:	4621      	mov	r1, r4
 8002b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b54:	4621      	mov	r1, r4
 8002b56:	028a      	lsls	r2, r1, #10
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	61fa      	str	r2, [r7, #28]
 8002b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b68:	f7fd fb36 	bl	80001d8 <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3750      	adds	r7, #80	@ 0x50
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	00f42400 	.word	0x00f42400
 8002bac:	007a1200 	.word	0x007a1200

08002bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bc8:	b084      	sub	sp, #16
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	f107 001c 	add.w	r0, r7, #28
 8002bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d123      	bne.n	8002c2a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d105      	bne.n	8002c1e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f001 fae8 	bl	80041f4 <USB_CoreReset>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e01b      	b.n	8002c62 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f001 fadc 	bl	80041f4 <USB_CoreReset>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c54:	e005      	b.n	8002c62 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c62:	7fbb      	ldrb	r3, [r7, #30]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10b      	bne.n	8002c80 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f043 0206 	orr.w	r2, r3, #6
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f043 0220 	orr.w	r2, r3, #32
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c8c:	b004      	add	sp, #16
 8002c8e:	4770      	bx	lr

08002c90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d165      	bne.n	8002d70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4a41      	ldr	r2, [pc, #260]	@ (8002dac <USB_SetTurnaroundTime+0x11c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d906      	bls.n	8002cba <USB_SetTurnaroundTime+0x2a>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a40      	ldr	r2, [pc, #256]	@ (8002db0 <USB_SetTurnaroundTime+0x120>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d202      	bcs.n	8002cba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e062      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4a3c      	ldr	r2, [pc, #240]	@ (8002db0 <USB_SetTurnaroundTime+0x120>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d306      	bcc.n	8002cd0 <USB_SetTurnaroundTime+0x40>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8002db4 <USB_SetTurnaroundTime+0x124>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d202      	bcs.n	8002cd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cca:	230e      	movs	r3, #14
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	e057      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a38      	ldr	r2, [pc, #224]	@ (8002db4 <USB_SetTurnaroundTime+0x124>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d306      	bcc.n	8002ce6 <USB_SetTurnaroundTime+0x56>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a37      	ldr	r2, [pc, #220]	@ (8002db8 <USB_SetTurnaroundTime+0x128>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d202      	bcs.n	8002ce6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ce0:	230d      	movs	r3, #13
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e04c      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4a33      	ldr	r2, [pc, #204]	@ (8002db8 <USB_SetTurnaroundTime+0x128>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d306      	bcc.n	8002cfc <USB_SetTurnaroundTime+0x6c>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4a32      	ldr	r2, [pc, #200]	@ (8002dbc <USB_SetTurnaroundTime+0x12c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d802      	bhi.n	8002cfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002cf6:	230c      	movs	r3, #12
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e041      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8002dbc <USB_SetTurnaroundTime+0x12c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d906      	bls.n	8002d12 <USB_SetTurnaroundTime+0x82>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc0 <USB_SetTurnaroundTime+0x130>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d802      	bhi.n	8002d12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d0c:	230b      	movs	r3, #11
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	e036      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <USB_SetTurnaroundTime+0x130>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d906      	bls.n	8002d28 <USB_SetTurnaroundTime+0x98>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <USB_SetTurnaroundTime+0x134>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d802      	bhi.n	8002d28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d22:	230a      	movs	r3, #10
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e02b      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4a26      	ldr	r2, [pc, #152]	@ (8002dc4 <USB_SetTurnaroundTime+0x134>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d906      	bls.n	8002d3e <USB_SetTurnaroundTime+0xae>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4a25      	ldr	r2, [pc, #148]	@ (8002dc8 <USB_SetTurnaroundTime+0x138>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d202      	bcs.n	8002d3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d38:	2309      	movs	r3, #9
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e020      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <USB_SetTurnaroundTime+0x138>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d306      	bcc.n	8002d54 <USB_SetTurnaroundTime+0xc4>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4a20      	ldr	r2, [pc, #128]	@ (8002dcc <USB_SetTurnaroundTime+0x13c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d802      	bhi.n	8002d54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d4e:	2308      	movs	r3, #8
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e015      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <USB_SetTurnaroundTime+0x13c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d906      	bls.n	8002d6a <USB_SetTurnaroundTime+0xda>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd0 <USB_SetTurnaroundTime+0x140>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d202      	bcs.n	8002d6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d64:	2307      	movs	r3, #7
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e00a      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e007      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d76:	2309      	movs	r3, #9
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e001      	b.n	8002d80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d7c:	2309      	movs	r3, #9
 8002d7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	029b      	lsls	r3, r3, #10
 8002d94:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	00d8acbf 	.word	0x00d8acbf
 8002db0:	00e4e1c0 	.word	0x00e4e1c0
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	01067380 	.word	0x01067380
 8002dbc:	011a499f 	.word	0x011a499f
 8002dc0:	01312cff 	.word	0x01312cff
 8002dc4:	014ca43f 	.word	0x014ca43f
 8002dc8:	016e3600 	.word	0x016e3600
 8002dcc:	01a6ab1f 	.word	0x01a6ab1f
 8002dd0:	01e84800 	.word	0x01e84800

08002dd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 0201 	bic.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d115      	bne.n	8002e66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e46:	200a      	movs	r0, #10
 8002e48:	f7fd fd42 	bl	80008d0 <HAL_Delay>
      ms += 10U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	330a      	adds	r3, #10
 8002e50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f001 f93f 	bl	80040d6 <USB_GetMode>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d01e      	beq.n	8002e9c <USB_SetCurrentMode+0x84>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e62:	d9f0      	bls.n	8002e46 <USB_SetCurrentMode+0x2e>
 8002e64:	e01a      	b.n	8002e9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d115      	bne.n	8002e98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e78:	200a      	movs	r0, #10
 8002e7a:	f7fd fd29 	bl	80008d0 <HAL_Delay>
      ms += 10U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	330a      	adds	r3, #10
 8002e82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f001 f926 	bl	80040d6 <USB_GetMode>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <USB_SetCurrentMode+0x84>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e94:	d9f0      	bls.n	8002e78 <USB_SetCurrentMode+0x60>
 8002e96:	e001      	b.n	8002e9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e005      	b.n	8002ea8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2bc8      	cmp	r3, #200	@ 0xc8
 8002ea0:	d101      	bne.n	8002ea6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e009      	b.n	8002ee4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	3340      	adds	r3, #64	@ 0x40
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	2200      	movs	r2, #0
 8002edc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b0e      	cmp	r3, #14
 8002ee8:	d9f2      	bls.n	8002ed0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002eea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11c      	bne.n	8002f2c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f16:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f22:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f2a:	e00b      	b.n	8002f44 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10d      	bne.n	8002f74 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f60:	2100      	movs	r1, #0
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f968 	bl	8003238 <USB_SetDevSpeed>
 8002f68:	e008      	b.n	8002f7c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f963 	bl	8003238 <USB_SetDevSpeed>
 8002f72:	e003      	b.n	8002f7c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f74:	2103      	movs	r1, #3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f95e 	bl	8003238 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8fa 	bl	8003178 <USB_FlushTxFifo>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f924 	bl	80031dc <USB_FlushRxFifo>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	e043      	b.n	8003050 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fde:	d118      	bne.n	8003012 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e013      	b.n	8003024 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003008:	461a      	mov	r2, r3
 800300a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e008      	b.n	8003024 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800301e:	461a      	mov	r2, r3
 8003020:	2300      	movs	r3, #0
 8003022:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003030:	461a      	mov	r2, r3
 8003032:	2300      	movs	r3, #0
 8003034:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003042:	461a      	mov	r2, r3
 8003044:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003048:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3301      	adds	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003054:	461a      	mov	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4293      	cmp	r3, r2
 800305a:	d3b5      	bcc.n	8002fc8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e043      	b.n	80030ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003078:	d118      	bne.n	80030ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308c:	461a      	mov	r2, r3
 800308e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e013      	b.n	80030be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a2:	461a      	mov	r2, r3
 80030a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e008      	b.n	80030be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b8:	461a      	mov	r2, r3
 80030ba:	2300      	movs	r3, #0
 80030bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ca:	461a      	mov	r2, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030dc:	461a      	mov	r2, r3
 80030de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	3301      	adds	r3, #1
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030ee:	461a      	mov	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d3b5      	bcc.n	8003062 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003108:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003116:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003118:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f043 0210 	orr.w	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <USB_DevInit+0x2c4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003138:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f043 0208 	orr.w	r2, r3, #8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800314c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003150:	2b01      	cmp	r3, #1
 8003152:	d107      	bne.n	8003164 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003164:	7dfb      	ldrb	r3, [r7, #23]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003170:	b004      	add	sp, #16
 8003172:	4770      	bx	lr
 8003174:	803c3800 	.word	0x803c3800

08003178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003192:	d901      	bls.n	8003198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e01b      	b.n	80031d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	daf2      	bge.n	8003186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	019b      	lsls	r3, r3, #6
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3301      	adds	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031bc:	d901      	bls.n	80031c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e006      	b.n	80031d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d0f0      	beq.n	80031b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3301      	adds	r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031f4:	d901      	bls.n	80031fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e018      	b.n	800322c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	daf2      	bge.n	80031e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2210      	movs	r2, #16
 800320a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003218:	d901      	bls.n	800321e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e006      	b.n	800322c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b10      	cmp	r3, #16
 8003228:	d0f0      	beq.n	800320c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	68f9      	ldr	r1, [r7, #12]
 8003254:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800326a:	b480      	push	{r7}
 800326c:	b087      	sub	sp, #28
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0306 	and.w	r3, r3, #6
 8003282:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]
 800328e:	e00a      	b.n	80032a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d002      	beq.n	800329c <USB_GetDevSpeed+0x32>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b06      	cmp	r3, #6
 800329a:	d102      	bne.n	80032a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800329c:	2302      	movs	r3, #2
 800329e:	75fb      	strb	r3, [r7, #23]
 80032a0:	e001      	b.n	80032a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032a2:	230f      	movs	r3, #15
 80032a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d13a      	bne.n	8003346 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	68f9      	ldr	r1, [r7, #12]
 80032ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d155      	bne.n	80033b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	791b      	ldrb	r3, [r3, #4]
 8003322:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003324:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	059b      	lsls	r3, r3, #22
 800332a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800332c:	4313      	orrs	r3, r2
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	0151      	lsls	r1, r2, #5
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	440a      	add	r2, r1
 8003336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	e036      	b.n	80033b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800334c:	69da      	ldr	r2, [r3, #28]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003364:	4313      	orrs	r3, r2
 8003366:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11a      	bne.n	80033b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	791b      	ldrb	r3, [r3, #4]
 8003398:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800339a:	430b      	orrs	r3, r1
 800339c:	4313      	orrs	r3, r2
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d161      	bne.n	80034a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033f6:	d11f      	bne.n	8003438 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	0151      	lsls	r1, r2, #5
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	440a      	add	r2, r1
 800340e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003412:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003416:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	0151      	lsls	r1, r2, #5
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	440a      	add	r2, r1
 800342e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003432:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003436:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800343e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003458:	4013      	ands	r3, r2
 800345a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	b29b      	uxth	r3, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800347c:	4013      	ands	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	0159      	lsls	r1, r3, #5
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	440b      	add	r3, r1
 8003496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800349a:	4619      	mov	r1, r3
 800349c:	4b35      	ldr	r3, [pc, #212]	@ (8003574 <USB_DeactivateEndpoint+0x1b0>)
 800349e:	4013      	ands	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
 80034a2:	e060      	b.n	8003566 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034ba:	d11f      	bne.n	80034fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	0151      	lsls	r1, r2, #5
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	440a      	add	r2, r1
 80034d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	0151      	lsls	r1, r2, #5
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	440a      	add	r2, r1
 80034f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	43db      	mvns	r3, r3
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800351c:	4013      	ands	r3, r2
 800351e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	041b      	lsls	r3, r3, #16
 8003538:	43db      	mvns	r3, r3
 800353a:	68f9      	ldr	r1, [r7, #12]
 800353c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003540:	4013      	ands	r3, r2
 8003542:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	0159      	lsls	r1, r3, #5
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	440b      	add	r3, r1
 800355a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800355e:	4619      	mov	r1, r3
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <USB_DeactivateEndpoint+0x1b4>)
 8003562:	4013      	ands	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	ec337800 	.word	0xec337800
 8003578:	eff37800 	.word	0xeff37800

0800357c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	@ 0x28
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	4613      	mov	r3, r2
 8003588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 817f 	bne.w	800389c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d132      	bne.n	800360c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	0151      	lsls	r1, r2, #5
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	440a      	add	r2, r1
 80035bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80035c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80035c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	0151      	lsls	r1, r2, #5
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	440a      	add	r2, r1
 80035e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	0151      	lsls	r1, r2, #5
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	440a      	add	r2, r1
 8003600:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003604:	0cdb      	lsrs	r3, r3, #19
 8003606:	04db      	lsls	r3, r3, #19
 8003608:	6113      	str	r3, [r2, #16]
 800360a:	e097      	b.n	800373c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	0151      	lsls	r1, r2, #5
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	440a      	add	r2, r1
 8003622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003626:	0cdb      	lsrs	r3, r3, #19
 8003628:	04db      	lsls	r3, r3, #19
 800362a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	0151      	lsls	r1, r2, #5
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	440a      	add	r2, r1
 8003642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003646:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800364a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800364e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11a      	bne.n	800368c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d903      	bls.n	800366a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	440a      	add	r2, r1
 8003680:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003684:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003688:	6113      	str	r3, [r2, #16]
 800368a:	e044      	b.n	8003716 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4413      	add	r3, r2
 8003696:	1e5a      	subs	r2, r3, #1
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	8afb      	ldrh	r3, [r7, #22]
 80036b2:	04d9      	lsls	r1, r3, #19
 80036b4:	4ba4      	ldr	r3, [pc, #656]	@ (8003948 <USB_EPStartXfer+0x3cc>)
 80036b6:	400b      	ands	r3, r1
 80036b8:	69b9      	ldr	r1, [r7, #24]
 80036ba:	0148      	lsls	r0, r1, #5
 80036bc:	69f9      	ldr	r1, [r7, #28]
 80036be:	4401      	add	r1, r0
 80036c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80036c4:	4313      	orrs	r3, r2
 80036c6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	791b      	ldrb	r3, [r3, #4]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d122      	bne.n	8003716 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	0151      	lsls	r1, r2, #5
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	440a      	add	r2, r1
 80036e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036ea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80036ee:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	8afb      	ldrh	r3, [r7, #22]
 8003700:	075b      	lsls	r3, r3, #29
 8003702:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003706:	69b9      	ldr	r1, [r7, #24]
 8003708:	0148      	lsls	r0, r1, #5
 800370a:	69f9      	ldr	r1, [r7, #28]
 800370c:	4401      	add	r1, r0
 800370e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003712:	4313      	orrs	r3, r2
 8003714:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372c:	69b9      	ldr	r1, [r7, #24]
 800372e:	0148      	lsls	r0, r1, #5
 8003730:	69f9      	ldr	r1, [r7, #28]
 8003732:	4401      	add	r1, r0
 8003734:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d14b      	bne.n	80037da <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003756:	461a      	mov	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	791b      	ldrb	r3, [r3, #4]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d128      	bne.n	80037b8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d110      	bne.n	8003798 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003790:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e00f      	b.n	80037b8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	0151      	lsls	r1, r2, #5
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	440a      	add	r2, r1
 80037ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e166      	b.n	8003aa8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	0151      	lsls	r1, r2, #5
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	440a      	add	r2, r1
 80037f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80037f8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	791b      	ldrb	r3, [r3, #4]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d015      	beq.n	800382e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 814e 	beq.w	8003aa8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	2101      	movs	r1, #1
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	69f9      	ldr	r1, [r7, #28]
 8003824:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003828:	4313      	orrs	r3, r2
 800382a:	634b      	str	r3, [r1, #52]	@ 0x34
 800382c:	e13c      	b.n	8003aa8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d110      	bne.n	8003860 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	0151      	lsls	r1, r2, #5
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	440a      	add	r2, r1
 8003854:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003858:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00f      	b.n	8003880 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	0151      	lsls	r1, r2, #5
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	440a      	add	r2, r1
 8003876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	68d9      	ldr	r1, [r3, #12]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	b298      	uxth	r0, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	4603      	mov	r3, r0
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f9b9 	bl	8003c0c <USB_WritePacket>
 800389a:	e105      	b.n	8003aa8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	0151      	lsls	r1, r2, #5
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	440a      	add	r2, r1
 80038b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038b6:	0cdb      	lsrs	r3, r3, #19
 80038b8:	04db      	lsls	r3, r3, #19
 80038ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	0151      	lsls	r1, r2, #5
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	440a      	add	r2, r1
 80038d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80038da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80038de:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d132      	bne.n	800394c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003914:	69b9      	ldr	r1, [r7, #24]
 8003916:	0148      	lsls	r0, r1, #5
 8003918:	69f9      	ldr	r1, [r7, #28]
 800391a:	4401      	add	r1, r0
 800391c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003920:	4313      	orrs	r3, r2
 8003922:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	0151      	lsls	r1, r2, #5
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	440a      	add	r2, r1
 800393a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800393e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003942:	6113      	str	r3, [r2, #16]
 8003944:	e062      	b.n	8003a0c <USB_EPStartXfer+0x490>
 8003946:	bf00      	nop
 8003948:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d123      	bne.n	800399c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	0148      	lsls	r0, r1, #5
 800396e:	69f9      	ldr	r1, [r7, #28]
 8003970:	4401      	add	r1, r0
 8003972:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003976:	4313      	orrs	r3, r2
 8003978:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	0151      	lsls	r1, r2, #5
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	440a      	add	r2, r1
 8003990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003994:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003998:	6113      	str	r3, [r2, #16]
 800399a:	e037      	b.n	8003a0c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4413      	add	r3, r2
 80039a6:	1e5a      	subs	r2, r3, #1
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	8afa      	ldrh	r2, [r7, #22]
 80039b8:	fb03 f202 	mul.w	r2, r3, r2
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	8afb      	ldrh	r3, [r7, #22]
 80039d0:	04d9      	lsls	r1, r3, #19
 80039d2:	4b38      	ldr	r3, [pc, #224]	@ (8003ab4 <USB_EPStartXfer+0x538>)
 80039d4:	400b      	ands	r3, r1
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	0148      	lsls	r0, r1, #5
 80039da:	69f9      	ldr	r1, [r7, #28]
 80039dc:	4401      	add	r1, r0
 80039de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039e2:	4313      	orrs	r3, r2
 80039e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039fc:	69b9      	ldr	r1, [r7, #24]
 80039fe:	0148      	lsls	r0, r1, #5
 8003a00:	69f9      	ldr	r1, [r7, #28]
 8003a02:	4401      	add	r1, r0
 8003a04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d10d      	bne.n	8003a2e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	68d9      	ldr	r1, [r3, #12]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2a:	460a      	mov	r2, r1
 8003a2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	791b      	ldrb	r3, [r3, #4]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d128      	bne.n	8003a88 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d110      	bne.n	8003a68 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	0151      	lsls	r1, r2, #5
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	440a      	add	r2, r1
 8003a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e00f      	b.n	8003a88 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	0151      	lsls	r1, r2, #5
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	440a      	add	r2, r1
 8003a9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aa2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003aa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	1ff80000 	.word	0x1ff80000

08003ab8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d14a      	bne.n	8003b6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aee:	f040 8086 	bne.w	8003bfe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	7812      	ldrb	r2, [r2, #0]
 8003b06:	0151      	lsls	r1, r2, #5
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	440a      	add	r2, r1
 8003b0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	7812      	ldrb	r2, [r2, #0]
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d902      	bls.n	8003b50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8003b4e:	e056      	b.n	8003bfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b68:	d0e7      	beq.n	8003b3a <USB_EPStopXfer+0x82>
 8003b6a:	e048      	b.n	8003bfe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b84:	d13b      	bne.n	8003bfe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	0151      	lsls	r1, r2, #5
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	440a      	add	r2, r1
 8003ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ba4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ba8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	0151      	lsls	r1, r2, #5
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	440a      	add	r2, r1
 8003bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d902      	bls.n	8003be4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	75fb      	strb	r3, [r7, #23]
          break;
 8003be2:	e00c      	b.n	8003bfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bfc:	d0e7      	beq.n	8003bce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	@ 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	71fb      	strb	r3, [r7, #7]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d123      	bne.n	8003c7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c32:	88bb      	ldrh	r3, [r7, #4]
 8003c34:	3303      	adds	r3, #3
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e018      	b.n	8003c72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	031a      	lsls	r2, r3, #12
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	3301      	adds	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3301      	adds	r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d3e2      	bcc.n	8003c40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3724      	adds	r7, #36	@ 0x24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b08b      	sub	sp, #44	@ 0x2c
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	e014      	b.n	8003cde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	3301      	adds	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	3301      	adds	r3, #1
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3a      	ldr	r2, [r7, #32]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d3e6      	bcc.n	8003cb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003ce6:	8bfb      	ldrh	r3, [r7, #30]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01e      	beq.n	8003d2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f107 0310 	add.w	r3, r7, #16
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	701a      	strb	r2, [r3, #0]
      i++;
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	3301      	adds	r3, #1
 8003d16:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003d1e:	8bfb      	ldrh	r3, [r7, #30]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d24:	8bfb      	ldrh	r3, [r7, #30]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ea      	bne.n	8003d00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	372c      	adds	r7, #44	@ 0x2c
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d12c      	bne.n	8003dae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	db12      	blt.n	8003d8c <USB_EPSetStall+0x54>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00f      	beq.n	8003d8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	0151      	lsls	r1, r2, #5
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	440a      	add	r2, r1
 8003d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003da6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	e02b      	b.n	8003e06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	db12      	blt.n	8003de6 <USB_EPSetStall+0xae>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00f      	beq.n	8003de6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003de4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	785b      	ldrb	r3, [r3, #1]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d128      	bne.n	8003e82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	0151      	lsls	r1, r2, #5
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	440a      	add	r2, r1
 8003e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	791b      	ldrb	r3, [r3, #4]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d003      	beq.n	8003e60 <USB_EPClearStall+0x4c>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	791b      	ldrb	r3, [r3, #4]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d138      	bne.n	8003ed2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e027      	b.n	8003ed2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	0151      	lsls	r1, r2, #5
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	440a      	add	r2, r1
 8003e98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ea0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	791b      	ldrb	r3, [r3, #4]
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d003      	beq.n	8003eb2 <USB_EPClearStall+0x9e>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	791b      	ldrb	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d10f      	bne.n	8003ed2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003efe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003f14:	68f9      	ldr	r1, [r7, #12]
 8003f16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f5a:	f023 0302 	bic.w	r3, r3, #2
 8003f5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f88:	f023 0303 	bic.w	r3, r3, #3
 8003f8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	b29b      	uxth	r3, r3
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4013      	ands	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800406c:	68bb      	ldr	r3, [r7, #8]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800407a:	b480      	push	{r7}
 800407c:	b087      	sub	sp, #28
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	01db      	lsls	r3, r3, #7
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4013      	ands	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040c8:	68bb      	ldr	r3, [r7, #8]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0301 	and.w	r3, r3, #1
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800410c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004110:	f023 0307 	bic.w	r3, r3, #7
 8004114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	460b      	mov	r3, r1
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	333c      	adds	r3, #60	@ 0x3c
 800414e:	3304      	adds	r3, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4a26      	ldr	r2, [pc, #152]	@ (80041f0 <USB_EP0_OutStart+0xb8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d90a      	bls.n	8004172 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800416c:	d101      	bne.n	8004172 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e037      	b.n	80041e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004178:	461a      	mov	r2, r3
 800417a:	2300      	movs	r3, #0
 800417c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800418c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004190:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041a0:	f043 0318 	orr.w	r3, r3, #24
 80041a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80041b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80041ba:	7afb      	ldrb	r3, [r7, #11]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d10f      	bne.n	80041e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80041de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	4f54300a 	.word	0x4f54300a

080041f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800420c:	d901      	bls.n	8004212 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e022      	b.n	8004258 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	daf2      	bge.n	8004200 <USB_CoreReset+0xc>

  count = 10U;
 800421a:	230a      	movs	r3, #10
 800421c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800421e:	e002      	b.n	8004226 <USB_CoreReset+0x32>
  {
    count--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b01      	subs	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f9      	bne.n	8004220 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f043 0201 	orr.w	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004244:	d901      	bls.n	800424a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e006      	b.n	8004258 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d0f0      	beq.n	8004238 <USB_CoreReset+0x44>

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004270:	2010      	movs	r0, #16
 8004272:	f002 f939 	bl	80064e8 <USBD_static_malloc>
 8004276:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	32b0      	adds	r2, #176	@ 0xb0
 8004288:	2100      	movs	r1, #0
 800428a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800428e:	2302      	movs	r3, #2
 8004290:	e048      	b.n	8004324 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	32b0      	adds	r2, #176	@ 0xb0
 800429c:	68f9      	ldr	r1, [r7, #12]
 800429e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	32b0      	adds	r2, #176	@ 0xb0
 80042ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7c1b      	ldrb	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80042be:	4b1b      	ldr	r3, [pc, #108]	@ (800432c <USBD_HID_Init+0xc8>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	331c      	adds	r3, #28
 80042d4:	2207      	movs	r2, #7
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	e00c      	b.n	80042f4 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80042da:	4b14      	ldr	r3, [pc, #80]	@ (800432c <USBD_HID_Init+0xc8>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	331c      	adds	r3, #28
 80042f0:	220a      	movs	r2, #10
 80042f2:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80042f4:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <USBD_HID_Init+0xc8>)
 80042f6:	7819      	ldrb	r1, [r3, #0]
 80042f8:	2304      	movs	r3, #4
 80042fa:	2203      	movs	r2, #3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 ffe2 	bl	80062c6 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <USBD_HID_Init+0xc8>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	f003 020f 	and.w	r2, r3, #15
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	3323      	adds	r3, #35	@ 0x23
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200000ca 	.word	0x200000ca

08004330 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800433c:	4b1f      	ldr	r3, [pc, #124]	@ (80043bc <USBD_HID_DeInit+0x8c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 ffe5 	bl	8006312 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004348:	4b1c      	ldr	r3, [pc, #112]	@ (80043bc <USBD_HID_DeInit+0x8c>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	f003 020f 	and.w	r2, r3, #15
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	3323      	adds	r3, #35	@ 0x23
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004362:	4b16      	ldr	r3, [pc, #88]	@ (80043bc <USBD_HID_DeInit+0x8c>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	f003 020f 	and.w	r2, r3, #15
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	331c      	adds	r3, #28
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	32b0      	adds	r2, #176	@ 0xb0
 8004386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d011      	beq.n	80043b2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	32b0      	adds	r2, #176	@ 0xb0
 8004398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439c:	4618      	mov	r0, r3
 800439e:	f002 f8b1 	bl	8006504 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	32b0      	adds	r2, #176	@ 0xb0
 80043ac:	2100      	movs	r1, #0
 80043ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	200000ca 	.word	0x200000ca

080043c0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	32b0      	adds	r2, #176	@ 0xb0
 80043d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0e8      	b.n	80045be <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d046      	beq.n	8004486 <USBD_HID_Setup+0xc6>
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	f040 80d8 	bne.w	80045ae <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	3b02      	subs	r3, #2
 8004404:	2b09      	cmp	r3, #9
 8004406:	d836      	bhi.n	8004476 <USBD_HID_Setup+0xb6>
 8004408:	a201      	add	r2, pc, #4	@ (adr r2, 8004410 <USBD_HID_Setup+0x50>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004467 	.word	0x08004467
 8004414:	08004447 	.word	0x08004447
 8004418:	08004477 	.word	0x08004477
 800441c:	08004477 	.word	0x08004477
 8004420:	08004477 	.word	0x08004477
 8004424:	08004477 	.word	0x08004477
 8004428:	08004477 	.word	0x08004477
 800442c:	08004477 	.word	0x08004477
 8004430:	08004455 	.word	0x08004455
 8004434:	08004439 	.word	0x08004439
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	885b      	ldrh	r3, [r3, #2]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]
          break;
 8004444:	e01e      	b.n	8004484 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f001 fbfb 	bl	8005c48 <USBD_CtlSendData>
          break;
 8004452:	e017      	b.n	8004484 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	885b      	ldrh	r3, [r3, #2]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	b29b      	uxth	r3, r3
 800445c:	b2db      	uxtb	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	605a      	str	r2, [r3, #4]
          break;
 8004464:	e00e      	b.n	8004484 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3304      	adds	r3, #4
 800446a:	2201      	movs	r2, #1
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f001 fbea 	bl	8005c48 <USBD_CtlSendData>
          break;
 8004474:	e006      	b.n	8004484 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004476:	6839      	ldr	r1, [r7, #0]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f001 fb68 	bl	8005b4e <USBD_CtlError>
          ret = USBD_FAIL;
 800447e:	2303      	movs	r3, #3
 8004480:	75fb      	strb	r3, [r7, #23]
          break;
 8004482:	bf00      	nop
      }
      break;
 8004484:	e09a      	b.n	80045bc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	2b0b      	cmp	r3, #11
 800448c:	f200 8086 	bhi.w	800459c <USBD_HID_Setup+0x1dc>
 8004490:	a201      	add	r2, pc, #4	@ (adr r2, 8004498 <USBD_HID_Setup+0xd8>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044c9 	.word	0x080044c9
 800449c:	080045ab 	.word	0x080045ab
 80044a0:	0800459d 	.word	0x0800459d
 80044a4:	0800459d 	.word	0x0800459d
 80044a8:	0800459d 	.word	0x0800459d
 80044ac:	0800459d 	.word	0x0800459d
 80044b0:	080044f3 	.word	0x080044f3
 80044b4:	0800459d 	.word	0x0800459d
 80044b8:	0800459d 	.word	0x0800459d
 80044bc:	0800459d 	.word	0x0800459d
 80044c0:	0800454b 	.word	0x0800454b
 80044c4:	08004575 	.word	0x08004575
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d107      	bne.n	80044e4 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80044d4:	f107 030a 	add.w	r3, r7, #10
 80044d8:	2202      	movs	r2, #2
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f001 fbb3 	bl	8005c48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044e2:	e063      	b.n	80045ac <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f001 fb31 	bl	8005b4e <USBD_CtlError>
            ret = USBD_FAIL;
 80044ec:	2303      	movs	r3, #3
 80044ee:	75fb      	strb	r3, [r7, #23]
          break;
 80044f0:	e05c      	b.n	80045ac <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	885b      	ldrh	r3, [r3, #2]
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b22      	cmp	r3, #34	@ 0x22
 80044fc:	d108      	bne.n	8004510 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	88db      	ldrh	r3, [r3, #6]
 8004502:	2b4a      	cmp	r3, #74	@ 0x4a
 8004504:	bf28      	it	cs
 8004506:	234a      	movcs	r3, #74	@ 0x4a
 8004508:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800450a:	4b2f      	ldr	r3, [pc, #188]	@ (80045c8 <USBD_HID_Setup+0x208>)
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e015      	b.n	800453c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	885b      	ldrh	r3, [r3, #2]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b21      	cmp	r3, #33	@ 0x21
 800451a:	d108      	bne.n	800452e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800451c:	4b2b      	ldr	r3, [pc, #172]	@ (80045cc <USBD_HID_Setup+0x20c>)
 800451e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	88db      	ldrh	r3, [r3, #6]
 8004524:	2b09      	cmp	r3, #9
 8004526:	bf28      	it	cs
 8004528:	2309      	movcs	r3, #9
 800452a:	82bb      	strh	r3, [r7, #20]
 800452c:	e006      	b.n	800453c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f001 fb0c 	bl	8005b4e <USBD_CtlError>
            ret = USBD_FAIL;
 8004536:	2303      	movs	r3, #3
 8004538:	75fb      	strb	r3, [r7, #23]
            break;
 800453a:	e037      	b.n	80045ac <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800453c:	8abb      	ldrh	r3, [r7, #20]
 800453e:	461a      	mov	r2, r3
 8004540:	6939      	ldr	r1, [r7, #16]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f001 fb80 	bl	8005c48 <USBD_CtlSendData>
          break;
 8004548:	e030      	b.n	80045ac <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b03      	cmp	r3, #3
 8004554:	d107      	bne.n	8004566 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3308      	adds	r3, #8
 800455a:	2201      	movs	r2, #1
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f001 fb72 	bl	8005c48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004564:	e022      	b.n	80045ac <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f001 faf0 	bl	8005b4e <USBD_CtlError>
            ret = USBD_FAIL;
 800456e:	2303      	movs	r3, #3
 8004570:	75fb      	strb	r3, [r7, #23]
          break;
 8004572:	e01b      	b.n	80045ac <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b03      	cmp	r3, #3
 800457e:	d106      	bne.n	800458e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	885b      	ldrh	r3, [r3, #2]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800458c:	e00e      	b.n	80045ac <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800458e:	6839      	ldr	r1, [r7, #0]
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f001 fadc 	bl	8005b4e <USBD_CtlError>
            ret = USBD_FAIL;
 8004596:	2303      	movs	r3, #3
 8004598:	75fb      	strb	r3, [r7, #23]
          break;
 800459a:	e007      	b.n	80045ac <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f001 fad5 	bl	8005b4e <USBD_CtlError>
          ret = USBD_FAIL;
 80045a4:	2303      	movs	r3, #3
 80045a6:	75fb      	strb	r3, [r7, #23]
          break;
 80045a8:	e000      	b.n	80045ac <USBD_HID_Setup+0x1ec>
          break;
 80045aa:	bf00      	nop
      }
      break;
 80045ac:	e006      	b.n	80045bc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80045ae:	6839      	ldr	r1, [r7, #0]
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f001 facc 	bl	8005b4e <USBD_CtlError>
      ret = USBD_FAIL;
 80045b6:	2303      	movs	r3, #3
 80045b8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ba:	bf00      	nop
  }

  return (uint8_t)ret;
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000080 	.word	0x20000080
 80045cc:	20000068 	.word	0x20000068

080045d0 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	32b0      	adds	r2, #176	@ 0xb0
 80045e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ec:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e014      	b.n	8004622 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b03      	cmp	r3, #3
 8004602:	d10d      	bne.n	8004620 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	7b1b      	ldrb	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2201      	movs	r2, #1
 8004610:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8004612:	4b06      	ldr	r3, [pc, #24]	@ (800462c <USBD_HID_SendReport+0x5c>)
 8004614:	7819      	ldrb	r1, [r3, #0]
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f001 ff21 	bl	8006462 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	200000ca 	.word	0x200000ca

08004630 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004638:	2181      	movs	r1, #129	@ 0x81
 800463a:	4809      	ldr	r0, [pc, #36]	@ (8004660 <USBD_HID_GetFSCfgDesc+0x30>)
 800463c:	f000 fc4e 	bl	8004edc <USBD_GetEpDesc>
 8004640:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	220a      	movs	r2, #10
 800464c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2222      	movs	r2, #34	@ 0x22
 8004652:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004654:	4b02      	ldr	r3, [pc, #8]	@ (8004660 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000044 	.word	0x20000044

08004664 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800466c:	2181      	movs	r1, #129	@ 0x81
 800466e:	4809      	ldr	r0, [pc, #36]	@ (8004694 <USBD_HID_GetHSCfgDesc+0x30>)
 8004670:	f000 fc34 	bl	8004edc <USBD_GetEpDesc>
 8004674:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2207      	movs	r2, #7
 8004680:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2222      	movs	r2, #34	@ 0x22
 8004686:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004688:	4b02      	ldr	r3, [pc, #8]	@ (8004694 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000044 	.word	0x20000044

08004698 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80046a0:	2181      	movs	r1, #129	@ 0x81
 80046a2:	4809      	ldr	r0, [pc, #36]	@ (80046c8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80046a4:	f000 fc1a 	bl	8004edc <USBD_GetEpDesc>
 80046a8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	220a      	movs	r2, #10
 80046b4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2222      	movs	r2, #34	@ 0x22
 80046ba:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80046bc:	4b02      	ldr	r3, [pc, #8]	@ (80046c8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000044 	.word	0x20000044

080046cc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	32b0      	adds	r2, #176	@ 0xb0
 80046e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e6:	2200      	movs	r2, #0
 80046e8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	220a      	movs	r2, #10
 8004704:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004706:	4b03      	ldr	r3, [pc, #12]	@ (8004714 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	20000074 	.word	0x20000074

08004718 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800472c:	2303      	movs	r3, #3
 800472e:	e01f      	b.n	8004770 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	79fa      	ldrb	r2, [r7, #7]
 8004762:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f001 fd47 	bl	80061f8 <USBD_LL_Init>
 800476a:	4603      	mov	r3, r0
 800476c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800476e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800478c:	2303      	movs	r3, #3
 800478e:	e025      	b.n	80047dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	32ae      	adds	r2, #174	@ 0xae
 80047a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00f      	beq.n	80047cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	32ae      	adds	r2, #174	@ 0xae
 80047b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	f107 020e 	add.w	r2, r7, #14
 80047c0:	4610      	mov	r0, r2
 80047c2:	4798      	blx	r3
 80047c4:	4602      	mov	r2, r0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 fd4f 	bl	8006290 <USBD_LL_Start>
 80047f2:	4603      	mov	r3, r0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004804:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	4611      	mov	r1, r2
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	4611      	mov	r1, r2
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004870:	2303      	movs	r3, #3
 8004872:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f001 f922 	bl	8005ada <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d01a      	beq.n	80048f0 <USBD_LL_SetupStage+0x72>
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d822      	bhi.n	8004904 <USBD_LL_SetupStage+0x86>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <USBD_LL_SetupStage+0x4a>
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d00a      	beq.n	80048dc <USBD_LL_SetupStage+0x5e>
 80048c6:	e01d      	b.n	8004904 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fb77 	bl	8004fc4 <USBD_StdDevReq>
 80048d6:	4603      	mov	r3, r0
 80048d8:	73fb      	strb	r3, [r7, #15]
      break;
 80048da:	e020      	b.n	800491e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fbdf 	bl	80050a8 <USBD_StdItfReq>
 80048ea:	4603      	mov	r3, r0
 80048ec:	73fb      	strb	r3, [r7, #15]
      break;
 80048ee:	e016      	b.n	800491e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fc41 	bl	8005180 <USBD_StdEPReq>
 80048fe:	4603      	mov	r3, r0
 8004900:	73fb      	strb	r3, [r7, #15]
      break;
 8004902:	e00c      	b.n	800491e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800490a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f001 fd1c 	bl	8006350 <USBD_LL_StallEP>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]
      break;
 800491c:	bf00      	nop
  }

  return ret;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	460b      	mov	r3, r1
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d177      	bne.n	8004a30 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004946:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800494e:	2b03      	cmp	r3, #3
 8004950:	f040 80a1 	bne.w	8004a96 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	8992      	ldrh	r2, [r2, #12]
 800495c:	4293      	cmp	r3, r2
 800495e:	d91c      	bls.n	800499a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	8992      	ldrh	r2, [r2, #12]
 8004968:	1a9a      	subs	r2, r3, r2
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	8992      	ldrh	r2, [r2, #12]
 8004976:	441a      	add	r2, r3
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6919      	ldr	r1, [r3, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	899b      	ldrh	r3, [r3, #12]
 8004984:	461a      	mov	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4293      	cmp	r3, r2
 800498c:	bf38      	it	cc
 800498e:	4613      	movcc	r3, r2
 8004990:	461a      	mov	r2, r3
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f001 f987 	bl	8005ca6 <USBD_CtlContinueRx>
 8004998:	e07d      	b.n	8004a96 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d014      	beq.n	80049d2 <USBD_LL_DataOutStage+0xaa>
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d81d      	bhi.n	80049e8 <USBD_LL_DataOutStage+0xc0>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <USBD_LL_DataOutStage+0x8e>
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d003      	beq.n	80049bc <USBD_LL_DataOutStage+0x94>
 80049b4:	e018      	b.n	80049e8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75bb      	strb	r3, [r7, #22]
            break;
 80049ba:	e018      	b.n	80049ee <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	4619      	mov	r1, r3
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fa6e 	bl	8004ea8 <USBD_CoreFindIF>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75bb      	strb	r3, [r7, #22]
            break;
 80049d0:	e00d      	b.n	80049ee <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	4619      	mov	r1, r3
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fa70 	bl	8004ec2 <USBD_CoreFindEP>
 80049e2:	4603      	mov	r3, r0
 80049e4:	75bb      	strb	r3, [r7, #22]
            break;
 80049e6:	e002      	b.n	80049ee <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	75bb      	strb	r3, [r7, #22]
            break;
 80049ec:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80049ee:	7dbb      	ldrb	r3, [r7, #22]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d119      	bne.n	8004a28 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d113      	bne.n	8004a28 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004a00:	7dba      	ldrb	r2, [r7, #22]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	32ae      	adds	r2, #174	@ 0xae
 8004a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8004a10:	7dba      	ldrb	r2, [r7, #22]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004a18:	7dba      	ldrb	r2, [r7, #22]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	32ae      	adds	r2, #174	@ 0xae
 8004a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f001 f94d 	bl	8005cc8 <USBD_CtlSendStatus>
 8004a2e:	e032      	b.n	8004a96 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004a30:	7afb      	ldrb	r3, [r7, #11]
 8004a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	4619      	mov	r1, r3
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fa41 	bl	8004ec2 <USBD_CoreFindEP>
 8004a40:	4603      	mov	r3, r0
 8004a42:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a44:	7dbb      	ldrb	r3, [r7, #22]
 8004a46:	2bff      	cmp	r3, #255	@ 0xff
 8004a48:	d025      	beq.n	8004a96 <USBD_LL_DataOutStage+0x16e>
 8004a4a:	7dbb      	ldrb	r3, [r7, #22]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d122      	bne.n	8004a96 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d117      	bne.n	8004a8c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004a5c:	7dba      	ldrb	r2, [r7, #22]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	32ae      	adds	r2, #174	@ 0xae
 8004a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00f      	beq.n	8004a8c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8004a6c:	7dba      	ldrb	r2, [r7, #22]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004a74:	7dba      	ldrb	r2, [r7, #22]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	32ae      	adds	r2, #174	@ 0xae
 8004a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	7afa      	ldrb	r2, [r7, #11]
 8004a82:	4611      	mov	r1, r2
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	4798      	blx	r3
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	e000      	b.n	8004a98 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d178      	bne.n	8004ba6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d163      	bne.n	8004b8c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	8992      	ldrh	r2, [r2, #12]
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d91c      	bls.n	8004b0a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	8992      	ldrh	r2, [r2, #12]
 8004ad8:	1a9a      	subs	r2, r3, r2
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	8992      	ldrh	r2, [r2, #12]
 8004ae6:	441a      	add	r2, r3
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6919      	ldr	r1, [r3, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	461a      	mov	r2, r3
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f001 f8c4 	bl	8005c84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004afc:	2300      	movs	r3, #0
 8004afe:	2200      	movs	r2, #0
 8004b00:	2100      	movs	r1, #0
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f001 fcce 	bl	80064a4 <USBD_LL_PrepareReceive>
 8004b08:	e040      	b.n	8004b8c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	899b      	ldrh	r3, [r3, #12]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d11c      	bne.n	8004b52 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d316      	bcc.n	8004b52 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d20f      	bcs.n	8004b52 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b32:	2200      	movs	r2, #0
 8004b34:	2100      	movs	r1, #0
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f001 f8a4 	bl	8005c84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b44:	2300      	movs	r3, #0
 8004b46:	2200      	movs	r2, #0
 8004b48:	2100      	movs	r1, #0
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f001 fcaa 	bl	80064a4 <USBD_LL_PrepareReceive>
 8004b50:	e01c      	b.n	8004b8c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d10f      	bne.n	8004b7e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b7e:	2180      	movs	r1, #128	@ 0x80
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f001 fbe5 	bl	8006350 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f001 f8b1 	bl	8005cee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d03a      	beq.n	8004c0c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fe30 	bl	80047fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004ba4:	e032      	b.n	8004c0c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004ba6:	7afb      	ldrb	r3, [r7, #11]
 8004ba8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	4619      	mov	r1, r3
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f986 	bl	8004ec2 <USBD_CoreFindEP>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	2bff      	cmp	r3, #255	@ 0xff
 8004bbe:	d025      	beq.n	8004c0c <USBD_LL_DataInStage+0x16c>
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d122      	bne.n	8004c0c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d11c      	bne.n	8004c0c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004bd2:	7dfa      	ldrb	r2, [r7, #23]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	32ae      	adds	r2, #174	@ 0xae
 8004bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d014      	beq.n	8004c0c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8004be2:	7dfa      	ldrb	r2, [r7, #23]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004bea:	7dfa      	ldrb	r2, [r7, #23]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	32ae      	adds	r2, #174	@ 0xae
 8004bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	7afa      	ldrb	r2, [r7, #11]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	4798      	blx	r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004c02:	7dbb      	ldrb	r3, [r7, #22]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8004c08:	7dbb      	ldrb	r3, [r7, #22]
 8004c0a:	e000      	b.n	8004c0e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d014      	beq.n	8004c7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00e      	beq.n	8004c7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6852      	ldr	r2, [r2, #4]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c7c:	2340      	movs	r3, #64	@ 0x40
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2100      	movs	r1, #0
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 fb1f 	bl	80062c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2240      	movs	r2, #64	@ 0x40
 8004c94:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c98:	2340      	movs	r3, #64	@ 0x40
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2180      	movs	r1, #128	@ 0x80
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f001 fb11 	bl	80062c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2240      	movs	r2, #64	@ 0x40
 8004cb0:	841a      	strh	r2, [r3, #32]

  return ret;
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d006      	beq.n	8004cfe <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2204      	movs	r2, #4
 8004d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d106      	bne.n	8004d36 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d110      	bne.n	8004d7a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	32ae      	adds	r2, #174	@ 0xae
 8004d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e01c      	b.n	8004de0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d115      	bne.n	8004dde <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	32ae      	adds	r2, #174	@ 0xae
 8004dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	32ae      	adds	r2, #174	@ 0xae
 8004dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	4611      	mov	r1, r2
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	32ae      	adds	r2, #174	@ 0xae
 8004dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e01c      	b.n	8004e44 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d115      	bne.n	8004e42 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	32ae      	adds	r2, #174	@ 0xae
 8004e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	32ae      	adds	r2, #174	@ 0xae
 8004e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6852      	ldr	r2, [r2, #4]
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	4611      	mov	r1, r2
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004eb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004ece:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	885b      	ldrh	r3, [r3, #2]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	7812      	ldrb	r2, [r2, #0]
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d91f      	bls.n	8004f42 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8004f08:	e013      	b.n	8004f32 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004f0a:	f107 030a 	add.w	r3, r7, #10
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6978      	ldr	r0, [r7, #20]
 8004f12:	f000 f81b 	bl	8004f4c <USBD_GetNextDesc>
 8004f16:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d108      	bne.n	8004f32 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	789b      	ldrb	r3, [r3, #2]
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d008      	beq.n	8004f40 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	885b      	ldrh	r3, [r3, #2]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	897b      	ldrh	r3, [r7, #10]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d8e5      	bhi.n	8004f0a <USBD_GetEpDesc+0x2e>
 8004f3e:	e000      	b.n	8004f42 <USBD_GetEpDesc+0x66>
          break;
 8004f40:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004f42:	693b      	ldr	r3, [r7, #16]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	7812      	ldrb	r2, [r2, #0]
 8004f62:	4413      	add	r3, r2
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4413      	add	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004fa2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	b21a      	sxth	r2, r3
 8004faa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	b21b      	sxth	r3, r3
 8004fb2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004fda:	2b40      	cmp	r3, #64	@ 0x40
 8004fdc:	d005      	beq.n	8004fea <USBD_StdDevReq+0x26>
 8004fde:	2b40      	cmp	r3, #64	@ 0x40
 8004fe0:	d857      	bhi.n	8005092 <USBD_StdDevReq+0xce>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00f      	beq.n	8005006 <USBD_StdDevReq+0x42>
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d153      	bne.n	8005092 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	32ae      	adds	r2, #174	@ 0xae
 8004ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
      break;
 8005004:	e04a      	b.n	800509c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	785b      	ldrb	r3, [r3, #1]
 800500a:	2b09      	cmp	r3, #9
 800500c:	d83b      	bhi.n	8005086 <USBD_StdDevReq+0xc2>
 800500e:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <USBD_StdDevReq+0x50>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005069 	.word	0x08005069
 8005018:	0800507d 	.word	0x0800507d
 800501c:	08005087 	.word	0x08005087
 8005020:	08005073 	.word	0x08005073
 8005024:	08005087 	.word	0x08005087
 8005028:	08005047 	.word	0x08005047
 800502c:	0800503d 	.word	0x0800503d
 8005030:	08005087 	.word	0x08005087
 8005034:	0800505f 	.word	0x0800505f
 8005038:	08005051 	.word	0x08005051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa3e 	bl	80054c0 <USBD_GetDescriptor>
          break;
 8005044:	e024      	b.n	8005090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fba3 	bl	8005794 <USBD_SetAddress>
          break;
 800504e:	e01f      	b.n	8005090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fbe2 	bl	800581c <USBD_SetConfig>
 8005058:	4603      	mov	r3, r0
 800505a:	73fb      	strb	r3, [r7, #15]
          break;
 800505c:	e018      	b.n	8005090 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fc85 	bl	8005970 <USBD_GetConfig>
          break;
 8005066:	e013      	b.n	8005090 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fcb6 	bl	80059dc <USBD_GetStatus>
          break;
 8005070:	e00e      	b.n	8005090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fce5 	bl	8005a44 <USBD_SetFeature>
          break;
 800507a:	e009      	b.n	8005090 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fd09 	bl	8005a96 <USBD_ClrFeature>
          break;
 8005084:	e004      	b.n	8005090 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fd60 	bl	8005b4e <USBD_CtlError>
          break;
 800508e:	bf00      	nop
      }
      break;
 8005090:	e004      	b.n	800509c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fd5a 	bl	8005b4e <USBD_CtlError>
      break;
 800509a:	bf00      	nop
  }

  return ret;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop

080050a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80050be:	2b40      	cmp	r3, #64	@ 0x40
 80050c0:	d005      	beq.n	80050ce <USBD_StdItfReq+0x26>
 80050c2:	2b40      	cmp	r3, #64	@ 0x40
 80050c4:	d852      	bhi.n	800516c <USBD_StdItfReq+0xc4>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <USBD_StdItfReq+0x26>
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d14e      	bne.n	800516c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d840      	bhi.n	800515e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	889b      	ldrh	r3, [r3, #4]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d836      	bhi.n	8005154 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	889b      	ldrh	r3, [r3, #4]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff feda 	bl	8004ea8 <USBD_CoreFindIF>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050f8:	7bbb      	ldrb	r3, [r7, #14]
 80050fa:	2bff      	cmp	r3, #255	@ 0xff
 80050fc:	d01d      	beq.n	800513a <USBD_StdItfReq+0x92>
 80050fe:	7bbb      	ldrb	r3, [r7, #14]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11a      	bne.n	800513a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005104:	7bba      	ldrb	r2, [r7, #14]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	32ae      	adds	r2, #174	@ 0xae
 800510a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00f      	beq.n	8005134 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005114:	7bba      	ldrb	r2, [r7, #14]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800511c:	7bba      	ldrb	r2, [r7, #14]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	32ae      	adds	r2, #174	@ 0xae
 8005122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4798      	blx	r3
 800512e:	4603      	mov	r3, r0
 8005130:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005132:	e004      	b.n	800513e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005134:	2303      	movs	r3, #3
 8005136:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005138:	e001      	b.n	800513e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800513a:	2303      	movs	r3, #3
 800513c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	88db      	ldrh	r3, [r3, #6]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d110      	bne.n	8005168 <USBD_StdItfReq+0xc0>
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10d      	bne.n	8005168 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fdbb 	bl	8005cc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005152:	e009      	b.n	8005168 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fcf9 	bl	8005b4e <USBD_CtlError>
          break;
 800515c:	e004      	b.n	8005168 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fcf4 	bl	8005b4e <USBD_CtlError>
          break;
 8005166:	e000      	b.n	800516a <USBD_StdItfReq+0xc2>
          break;
 8005168:	bf00      	nop
      }
      break;
 800516a:	e004      	b.n	8005176 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fced 	bl	8005b4e <USBD_CtlError>
      break;
 8005174:	bf00      	nop
  }

  return ret;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	889b      	ldrh	r3, [r3, #4]
 8005192:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800519c:	2b40      	cmp	r3, #64	@ 0x40
 800519e:	d007      	beq.n	80051b0 <USBD_StdEPReq+0x30>
 80051a0:	2b40      	cmp	r3, #64	@ 0x40
 80051a2:	f200 8181 	bhi.w	80054a8 <USBD_StdEPReq+0x328>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d02a      	beq.n	8005200 <USBD_StdEPReq+0x80>
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	f040 817c 	bne.w	80054a8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80051b0:	7bbb      	ldrb	r3, [r7, #14]
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fe84 	bl	8004ec2 <USBD_CoreFindEP>
 80051ba:	4603      	mov	r3, r0
 80051bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051be:	7b7b      	ldrb	r3, [r7, #13]
 80051c0:	2bff      	cmp	r3, #255	@ 0xff
 80051c2:	f000 8176 	beq.w	80054b2 <USBD_StdEPReq+0x332>
 80051c6:	7b7b      	ldrb	r3, [r7, #13]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 8172 	bne.w	80054b2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80051ce:	7b7a      	ldrb	r2, [r7, #13]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80051d6:	7b7a      	ldrb	r2, [r7, #13]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	32ae      	adds	r2, #174	@ 0xae
 80051dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8165 	beq.w	80054b2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80051e8:	7b7a      	ldrb	r2, [r7, #13]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	32ae      	adds	r2, #174	@ 0xae
 80051ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	4798      	blx	r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051fe:	e158      	b.n	80054b2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d008      	beq.n	800521a <USBD_StdEPReq+0x9a>
 8005208:	2b03      	cmp	r3, #3
 800520a:	f300 8147 	bgt.w	800549c <USBD_StdEPReq+0x31c>
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 809b 	beq.w	800534a <USBD_StdEPReq+0x1ca>
 8005214:	2b01      	cmp	r3, #1
 8005216:	d03c      	beq.n	8005292 <USBD_StdEPReq+0x112>
 8005218:	e140      	b.n	800549c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d002      	beq.n	800522c <USBD_StdEPReq+0xac>
 8005226:	2b03      	cmp	r3, #3
 8005228:	d016      	beq.n	8005258 <USBD_StdEPReq+0xd8>
 800522a:	e02c      	b.n	8005286 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800522c:	7bbb      	ldrb	r3, [r7, #14]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00d      	beq.n	800524e <USBD_StdEPReq+0xce>
 8005232:	7bbb      	ldrb	r3, [r7, #14]
 8005234:	2b80      	cmp	r3, #128	@ 0x80
 8005236:	d00a      	beq.n	800524e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 f887 	bl	8006350 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005242:	2180      	movs	r1, #128	@ 0x80
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f001 f883 	bl	8006350 <USBD_LL_StallEP>
 800524a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800524c:	e020      	b.n	8005290 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800524e:	6839      	ldr	r1, [r7, #0]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fc7c 	bl	8005b4e <USBD_CtlError>
              break;
 8005256:	e01b      	b.n	8005290 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	885b      	ldrh	r3, [r3, #2]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10e      	bne.n	800527e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <USBD_StdEPReq+0xfe>
 8005266:	7bbb      	ldrb	r3, [r7, #14]
 8005268:	2b80      	cmp	r3, #128	@ 0x80
 800526a:	d008      	beq.n	800527e <USBD_StdEPReq+0xfe>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	88db      	ldrh	r3, [r3, #6]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005274:	7bbb      	ldrb	r3, [r7, #14]
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 f869 	bl	8006350 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fd22 	bl	8005cc8 <USBD_CtlSendStatus>

              break;
 8005284:	e004      	b.n	8005290 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fc60 	bl	8005b4e <USBD_CtlError>
              break;
 800528e:	bf00      	nop
          }
          break;
 8005290:	e109      	b.n	80054a6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d002      	beq.n	80052a4 <USBD_StdEPReq+0x124>
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d016      	beq.n	80052d0 <USBD_StdEPReq+0x150>
 80052a2:	e04b      	b.n	800533c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052a4:	7bbb      	ldrb	r3, [r7, #14]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00d      	beq.n	80052c6 <USBD_StdEPReq+0x146>
 80052aa:	7bbb      	ldrb	r3, [r7, #14]
 80052ac:	2b80      	cmp	r3, #128	@ 0x80
 80052ae:	d00a      	beq.n	80052c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f001 f84b 	bl	8006350 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052ba:	2180      	movs	r1, #128	@ 0x80
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 f847 	bl	8006350 <USBD_LL_StallEP>
 80052c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052c4:	e040      	b.n	8005348 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fc40 	bl	8005b4e <USBD_CtlError>
              break;
 80052ce:	e03b      	b.n	8005348 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	885b      	ldrh	r3, [r3, #2]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d136      	bne.n	8005346 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f001 f851 	bl	800638e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fceb 	bl	8005cc8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80052f2:	7bbb      	ldrb	r3, [r7, #14]
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff fde3 	bl	8004ec2 <USBD_CoreFindEP>
 80052fc:	4603      	mov	r3, r0
 80052fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005300:	7b7b      	ldrb	r3, [r7, #13]
 8005302:	2bff      	cmp	r3, #255	@ 0xff
 8005304:	d01f      	beq.n	8005346 <USBD_StdEPReq+0x1c6>
 8005306:	7b7b      	ldrb	r3, [r7, #13]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d11c      	bne.n	8005346 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800530c:	7b7a      	ldrb	r2, [r7, #13]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005314:	7b7a      	ldrb	r2, [r7, #13]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	32ae      	adds	r2, #174	@ 0xae
 800531a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d010      	beq.n	8005346 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005324:	7b7a      	ldrb	r2, [r7, #13]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	32ae      	adds	r2, #174	@ 0xae
 800532a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
 8005336:	4603      	mov	r3, r0
 8005338:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800533a:	e004      	b.n	8005346 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fc05 	bl	8005b4e <USBD_CtlError>
              break;
 8005344:	e000      	b.n	8005348 <USBD_StdEPReq+0x1c8>
              break;
 8005346:	bf00      	nop
          }
          break;
 8005348:	e0ad      	b.n	80054a6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d002      	beq.n	800535c <USBD_StdEPReq+0x1dc>
 8005356:	2b03      	cmp	r3, #3
 8005358:	d033      	beq.n	80053c2 <USBD_StdEPReq+0x242>
 800535a:	e099      	b.n	8005490 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800535c:	7bbb      	ldrb	r3, [r7, #14]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <USBD_StdEPReq+0x1f2>
 8005362:	7bbb      	ldrb	r3, [r7, #14]
 8005364:	2b80      	cmp	r3, #128	@ 0x80
 8005366:	d004      	beq.n	8005372 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fbef 	bl	8005b4e <USBD_CtlError>
                break;
 8005370:	e093      	b.n	800549a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005376:	2b00      	cmp	r3, #0
 8005378:	da0b      	bge.n	8005392 <USBD_StdEPReq+0x212>
 800537a:	7bbb      	ldrb	r3, [r7, #14]
 800537c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	3310      	adds	r3, #16
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4413      	add	r3, r2
 800538e:	3304      	adds	r3, #4
 8005390:	e00b      	b.n	80053aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005392:	7bbb      	ldrb	r3, [r7, #14]
 8005394:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	3304      	adds	r3, #4
 80053aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	330e      	adds	r3, #14
 80053b6:	2202      	movs	r2, #2
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fc44 	bl	8005c48 <USBD_CtlSendData>
              break;
 80053c0:	e06b      	b.n	800549a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80053c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da11      	bge.n	80053ee <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053ca:	7bbb      	ldrb	r3, [r7, #14]
 80053cc:	f003 020f 	and.w	r2, r3, #15
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	3323      	adds	r3, #35	@ 0x23
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d117      	bne.n	8005414 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fbb1 	bl	8005b4e <USBD_CtlError>
                  break;
 80053ec:	e055      	b.n	800549a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053ee:	7bbb      	ldrb	r3, [r7, #14]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fb9e 	bl	8005b4e <USBD_CtlError>
                  break;
 8005412:	e042      	b.n	800549a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005418:	2b00      	cmp	r3, #0
 800541a:	da0b      	bge.n	8005434 <USBD_StdEPReq+0x2b4>
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	3310      	adds	r3, #16
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	e00b      	b.n	800544c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005434:	7bbb      	ldrb	r3, [r7, #14]
 8005436:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	3304      	adds	r3, #4
 800544c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <USBD_StdEPReq+0x2da>
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d103      	bne.n	8005462 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	739a      	strb	r2, [r3, #14]
 8005460:	e00e      	b.n	8005480 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 ffb0 	bl	80063cc <USBD_LL_IsStallEP>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2201      	movs	r2, #1
 8005476:	739a      	strb	r2, [r3, #14]
 8005478:	e002      	b.n	8005480 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	330e      	adds	r3, #14
 8005484:	2202      	movs	r2, #2
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fbdd 	bl	8005c48 <USBD_CtlSendData>
              break;
 800548e:	e004      	b.n	800549a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fb5b 	bl	8005b4e <USBD_CtlError>
              break;
 8005498:	bf00      	nop
          }
          break;
 800549a:	e004      	b.n	80054a6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fb55 	bl	8005b4e <USBD_CtlError>
          break;
 80054a4:	bf00      	nop
      }
      break;
 80054a6:	e005      	b.n	80054b4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fb4f 	bl	8005b4e <USBD_CtlError>
      break;
 80054b0:	e000      	b.n	80054b4 <USBD_StdEPReq+0x334>
      break;
 80054b2:	bf00      	nop
  }

  return ret;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	885b      	ldrh	r3, [r3, #2]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	2b06      	cmp	r3, #6
 80054e2:	f200 8128 	bhi.w	8005736 <USBD_GetDescriptor+0x276>
 80054e6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <USBD_GetDescriptor+0x2c>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005509 	.word	0x08005509
 80054f0:	08005521 	.word	0x08005521
 80054f4:	08005561 	.word	0x08005561
 80054f8:	08005737 	.word	0x08005737
 80054fc:	08005737 	.word	0x08005737
 8005500:	080056d7 	.word	0x080056d7
 8005504:	08005703 	.word	0x08005703
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	7c12      	ldrb	r2, [r2, #16]
 8005514:	f107 0108 	add.w	r1, r7, #8
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
 800551c:	60f8      	str	r0, [r7, #12]
      break;
 800551e:	e112      	b.n	8005746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7c1b      	ldrb	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10d      	bne.n	8005544 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800552e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005530:	f107 0208 	add.w	r2, r7, #8
 8005534:	4610      	mov	r0, r2
 8005536:	4798      	blx	r3
 8005538:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	2202      	movs	r2, #2
 8005540:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005542:	e100      	b.n	8005746 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	f107 0208 	add.w	r2, r7, #8
 8005550:	4610      	mov	r0, r2
 8005552:	4798      	blx	r3
 8005554:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	2202      	movs	r2, #2
 800555c:	701a      	strb	r2, [r3, #0]
      break;
 800555e:	e0f2      	b.n	8005746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	885b      	ldrh	r3, [r3, #2]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b05      	cmp	r3, #5
 8005568:	f200 80ac 	bhi.w	80056c4 <USBD_GetDescriptor+0x204>
 800556c:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <USBD_GetDescriptor+0xb4>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	0800558d 	.word	0x0800558d
 8005578:	080055c1 	.word	0x080055c1
 800557c:	080055f5 	.word	0x080055f5
 8005580:	08005629 	.word	0x08005629
 8005584:	0800565d 	.word	0x0800565d
 8005588:	08005691 	.word	0x08005691
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	7c12      	ldrb	r2, [r2, #16]
 80055a4:	f107 0108 	add.w	r1, r7, #8
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
 80055ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055ae:	e091      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 facb 	bl	8005b4e <USBD_CtlError>
            err++;
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	3301      	adds	r3, #1
 80055bc:	72fb      	strb	r3, [r7, #11]
          break;
 80055be:	e089      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	7c12      	ldrb	r2, [r2, #16]
 80055d8:	f107 0108 	add.w	r1, r7, #8
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
 80055e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055e2:	e077      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fab1 	bl	8005b4e <USBD_CtlError>
            err++;
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	3301      	adds	r3, #1
 80055f0:	72fb      	strb	r3, [r7, #11]
          break;
 80055f2:	e06f      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	7c12      	ldrb	r2, [r2, #16]
 800560c:	f107 0108 	add.w	r1, r7, #8
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
 8005614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005616:	e05d      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa97 	bl	8005b4e <USBD_CtlError>
            err++;
 8005620:	7afb      	ldrb	r3, [r7, #11]
 8005622:	3301      	adds	r3, #1
 8005624:	72fb      	strb	r3, [r7, #11]
          break;
 8005626:	e055      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	7c12      	ldrb	r2, [r2, #16]
 8005640:	f107 0108 	add.w	r1, r7, #8
 8005644:	4610      	mov	r0, r2
 8005646:	4798      	blx	r3
 8005648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800564a:	e043      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa7d 	bl	8005b4e <USBD_CtlError>
            err++;
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	3301      	adds	r3, #1
 8005658:	72fb      	strb	r3, [r7, #11]
          break;
 800565a:	e03b      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	7c12      	ldrb	r2, [r2, #16]
 8005674:	f107 0108 	add.w	r1, r7, #8
 8005678:	4610      	mov	r0, r2
 800567a:	4798      	blx	r3
 800567c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800567e:	e029      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa63 	bl	8005b4e <USBD_CtlError>
            err++;
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	3301      	adds	r3, #1
 800568c:	72fb      	strb	r3, [r7, #11]
          break;
 800568e:	e021      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	7c12      	ldrb	r2, [r2, #16]
 80056a8:	f107 0108 	add.w	r1, r7, #8
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056b2:	e00f      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa49 	bl	8005b4e <USBD_CtlError>
            err++;
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	3301      	adds	r3, #1
 80056c0:	72fb      	strb	r3, [r7, #11]
          break;
 80056c2:	e007      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa41 	bl	8005b4e <USBD_CtlError>
          err++;
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	3301      	adds	r3, #1
 80056d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80056d2:	bf00      	nop
      }
      break;
 80056d4:	e037      	b.n	8005746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7c1b      	ldrb	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e6:	f107 0208 	add.w	r2, r7, #8
 80056ea:	4610      	mov	r0, r2
 80056ec:	4798      	blx	r3
 80056ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056f0:	e029      	b.n	8005746 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fa2a 	bl	8005b4e <USBD_CtlError>
        err++;
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	3301      	adds	r3, #1
 80056fe:	72fb      	strb	r3, [r7, #11]
      break;
 8005700:	e021      	b.n	8005746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	7c1b      	ldrb	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	f107 0208 	add.w	r2, r7, #8
 8005716:	4610      	mov	r0, r2
 8005718:	4798      	blx	r3
 800571a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	2207      	movs	r2, #7
 8005722:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005724:	e00f      	b.n	8005746 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fa10 	bl	8005b4e <USBD_CtlError>
        err++;
 800572e:	7afb      	ldrb	r3, [r7, #11]
 8005730:	3301      	adds	r3, #1
 8005732:	72fb      	strb	r3, [r7, #11]
      break;
 8005734:	e007      	b.n	8005746 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fa08 	bl	8005b4e <USBD_CtlError>
      err++;
 800573e:	7afb      	ldrb	r3, [r7, #11]
 8005740:	3301      	adds	r3, #1
 8005742:	72fb      	strb	r3, [r7, #11]
      break;
 8005744:	bf00      	nop
  }

  if (err != 0U)
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11e      	bne.n	800578a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	88db      	ldrh	r3, [r3, #6]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d016      	beq.n	8005782 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005754:	893b      	ldrh	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	88da      	ldrh	r2, [r3, #6]
 800575e:	893b      	ldrh	r3, [r7, #8]
 8005760:	4293      	cmp	r3, r2
 8005762:	bf28      	it	cs
 8005764:	4613      	movcs	r3, r2
 8005766:	b29b      	uxth	r3, r3
 8005768:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800576a:	893b      	ldrh	r3, [r7, #8]
 800576c:	461a      	mov	r2, r3
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fa69 	bl	8005c48 <USBD_CtlSendData>
 8005776:	e009      	b.n	800578c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f9e7 	bl	8005b4e <USBD_CtlError>
 8005780:	e004      	b.n	800578c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 faa0 	bl	8005cc8 <USBD_CtlSendStatus>
 8005788:	e000      	b.n	800578c <USBD_GetDescriptor+0x2cc>
    return;
 800578a:	bf00      	nop
  }
}
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop

08005794 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	889b      	ldrh	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d131      	bne.n	800580a <USBD_SetAddress+0x76>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	88db      	ldrh	r3, [r3, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d12d      	bne.n	800580a <USBD_SetAddress+0x76>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	885b      	ldrh	r3, [r3, #2]
 80057b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80057b4:	d829      	bhi.n	800580a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	885b      	ldrh	r3, [r3, #2]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d104      	bne.n	80057d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f9bc 	bl	8005b4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d6:	e01d      	b.n	8005814 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7bfa      	ldrb	r2, [r7, #15]
 80057dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fe1d 	bl	8006424 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa6c 	bl	8005cc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fe:	e009      	b.n	8005814 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005808:	e004      	b.n	8005814 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f99e 	bl	8005b4e <USBD_CtlError>
  }
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	885b      	ldrh	r3, [r3, #2]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	4b4e      	ldr	r3, [pc, #312]	@ (800596c <USBD_SetConfig+0x150>)
 8005832:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005834:	4b4d      	ldr	r3, [pc, #308]	@ (800596c <USBD_SetConfig+0x150>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d905      	bls.n	8005848 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f985 	bl	8005b4e <USBD_CtlError>
    return USBD_FAIL;
 8005844:	2303      	movs	r3, #3
 8005846:	e08c      	b.n	8005962 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d002      	beq.n	800585a <USBD_SetConfig+0x3e>
 8005854:	2b03      	cmp	r3, #3
 8005856:	d029      	beq.n	80058ac <USBD_SetConfig+0x90>
 8005858:	e075      	b.n	8005946 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800585a:	4b44      	ldr	r3, [pc, #272]	@ (800596c <USBD_SetConfig+0x150>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d020      	beq.n	80058a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005862:	4b42      	ldr	r3, [pc, #264]	@ (800596c <USBD_SetConfig+0x150>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800586c:	4b3f      	ldr	r3, [pc, #252]	@ (800596c <USBD_SetConfig+0x150>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fe ffcd 	bl	8004812 <USBD_SetClassConfig>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f962 	bl	8005b4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2202      	movs	r2, #2
 800588e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005892:	e065      	b.n	8005960 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa17 	bl	8005cc8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2203      	movs	r2, #3
 800589e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80058a2:	e05d      	b.n	8005960 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fa0f 	bl	8005cc8 <USBD_CtlSendStatus>
      break;
 80058aa:	e059      	b.n	8005960 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80058ac:	4b2f      	ldr	r3, [pc, #188]	@ (800596c <USBD_SetConfig+0x150>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d112      	bne.n	80058da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80058bc:	4b2b      	ldr	r3, [pc, #172]	@ (800596c <USBD_SetConfig+0x150>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80058c6:	4b29      	ldr	r3, [pc, #164]	@ (800596c <USBD_SetConfig+0x150>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fe ffbc 	bl	800484a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9f8 	bl	8005cc8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80058d8:	e042      	b.n	8005960 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80058da:	4b24      	ldr	r3, [pc, #144]	@ (800596c <USBD_SetConfig+0x150>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d02a      	beq.n	800593e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7fe ffaa 	bl	800484a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80058f6:	4b1d      	ldr	r3, [pc, #116]	@ (800596c <USBD_SetConfig+0x150>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005900:	4b1a      	ldr	r3, [pc, #104]	@ (800596c <USBD_SetConfig+0x150>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fe ff83 	bl	8004812 <USBD_SetClassConfig>
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00f      	beq.n	8005936 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f918 	bl	8005b4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fe ff8f 	bl	800484a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005934:	e014      	b.n	8005960 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f9c6 	bl	8005cc8 <USBD_CtlSendStatus>
      break;
 800593c:	e010      	b.n	8005960 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f9c2 	bl	8005cc8 <USBD_CtlSendStatus>
      break;
 8005944:	e00c      	b.n	8005960 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f900 	bl	8005b4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800594e:	4b07      	ldr	r3, [pc, #28]	@ (800596c <USBD_SetConfig+0x150>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fe ff78 	bl	800484a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800595a:	2303      	movs	r3, #3
 800595c:	73fb      	strb	r3, [r7, #15]
      break;
 800595e:	bf00      	nop
  }

  return ret;
 8005960:	7bfb      	ldrb	r3, [r7, #15]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000140 	.word	0x20000140

08005970 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	88db      	ldrh	r3, [r3, #6]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d004      	beq.n	800598c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8e2 	bl	8005b4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800598a:	e023      	b.n	80059d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	dc02      	bgt.n	800599e <USBD_GetConfig+0x2e>
 8005998:	2b00      	cmp	r3, #0
 800599a:	dc03      	bgt.n	80059a4 <USBD_GetConfig+0x34>
 800599c:	e015      	b.n	80059ca <USBD_GetConfig+0x5a>
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d00b      	beq.n	80059ba <USBD_GetConfig+0x4a>
 80059a2:	e012      	b.n	80059ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3308      	adds	r3, #8
 80059ae:	2201      	movs	r2, #1
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f948 	bl	8005c48 <USBD_CtlSendData>
        break;
 80059b8:	e00c      	b.n	80059d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	2201      	movs	r2, #1
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f940 	bl	8005c48 <USBD_CtlSendData>
        break;
 80059c8:	e004      	b.n	80059d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8be 	bl	8005b4e <USBD_CtlError>
        break;
 80059d2:	bf00      	nop
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d81e      	bhi.n	8005a32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	88db      	ldrh	r3, [r3, #6]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d004      	beq.n	8005a06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8a5 	bl	8005b4e <USBD_CtlError>
        break;
 8005a04:	e01a      	b.n	8005a3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f043 0202 	orr.w	r2, r3, #2
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	330c      	adds	r3, #12
 8005a26:	2202      	movs	r2, #2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f90c 	bl	8005c48 <USBD_CtlSendData>
      break;
 8005a30:	e004      	b.n	8005a3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f88a 	bl	8005b4e <USBD_CtlError>
      break;
 8005a3a:	bf00      	nop
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	885b      	ldrh	r3, [r3, #2]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d107      	bne.n	8005a66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f932 	bl	8005cc8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005a64:	e013      	b.n	8005a8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	885b      	ldrh	r3, [r3, #2]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d10b      	bne.n	8005a86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	889b      	ldrh	r3, [r3, #4]
 8005a72:	0a1b      	lsrs	r3, r3, #8
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f922 	bl	8005cc8 <USBD_CtlSendStatus>
}
 8005a84:	e003      	b.n	8005a8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f860 	bl	8005b4e <USBD_CtlError>
}
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d80b      	bhi.n	8005ac6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	885b      	ldrh	r3, [r3, #2]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d10c      	bne.n	8005ad0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f902 	bl	8005cc8 <USBD_CtlSendStatus>
      }
      break;
 8005ac4:	e004      	b.n	8005ad0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f840 	bl	8005b4e <USBD_CtlError>
      break;
 8005ace:	e000      	b.n	8005ad2 <USBD_ClrFeature+0x3c>
      break;
 8005ad0:	bf00      	nop
  }
}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	781a      	ldrb	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3301      	adds	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff fa3d 	bl	8004f84 <SWAPBYTE>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff fa30 	bl	8004f84 <SWAPBYTE>
 8005b24:	4603      	mov	r3, r0
 8005b26:	461a      	mov	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3301      	adds	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fa23 	bl	8004f84 <SWAPBYTE>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	80da      	strh	r2, [r3, #6]
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b58:	2180      	movs	r1, #128	@ 0x80
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fbf8 	bl	8006350 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b60:	2100      	movs	r1, #0
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fbf4 	bl	8006350 <USBD_LL_StallEP>
}
 8005b68:	bf00      	nop
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d042      	beq.n	8005c0c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005b8a:	6938      	ldr	r0, [r7, #16]
 8005b8c:	f000 f842 	bl	8005c14 <USBD_GetLen>
 8005b90:	4603      	mov	r3, r0
 8005b92:	3301      	adds	r3, #1
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b9a:	d808      	bhi.n	8005bae <USBD_GetString+0x3e>
 8005b9c:	6938      	ldr	r0, [r7, #16]
 8005b9e:	f000 f839 	bl	8005c14 <USBD_GetLen>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	e001      	b.n	8005bb2 <USBD_GetString+0x42>
 8005bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	4413      	add	r3, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	7812      	ldrb	r2, [r2, #0]
 8005bc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4413      	add	r3, r2
 8005bce:	2203      	movs	r2, #3
 8005bd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005bd8:	e013      	b.n	8005c02 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	4413      	add	r3, r2
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	7812      	ldrb	r2, [r2, #0]
 8005be4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	3301      	adds	r3, #1
 8005bea:	613b      	str	r3, [r7, #16]
    idx++;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
    idx++;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e7      	bne.n	8005bda <USBD_GetString+0x6a>
 8005c0a:	e000      	b.n	8005c0e <USBD_GetString+0x9e>
    return;
 8005c0c:	bf00      	nop
  }
}
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c24:	e005      	b.n	8005c32 <USBD_GetLen+0x1e>
  {
    len++;
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f5      	bne.n	8005c26 <USBD_GetLen+0x12>
  }

  return len;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	2100      	movs	r1, #0
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 fbf4 	bl	8006462 <USBD_LL_Transmit>

  return USBD_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	2100      	movs	r1, #0
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 fbe3 	bl	8006462 <USBD_LL_Transmit>

  return USBD_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fbf3 	bl	80064a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2100      	movs	r1, #0
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fbbf 	bl	8006462 <USBD_LL_Transmit>

  return USBD_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2205      	movs	r2, #5
 8005cfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2200      	movs	r2, #0
 8005d02:	2100      	movs	r1, #0
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fbcd 	bl	80064a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	490e      	ldr	r1, [pc, #56]	@ (8005d54 <MX_USB_DEVICE_Init+0x40>)
 8005d1c:	480e      	ldr	r0, [pc, #56]	@ (8005d58 <MX_USB_DEVICE_Init+0x44>)
 8005d1e:	f7fe fcfb 	bl	8004718 <USBD_Init>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005d28:	f7fa fcbc 	bl	80006a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005d2c:	490b      	ldr	r1, [pc, #44]	@ (8005d5c <MX_USB_DEVICE_Init+0x48>)
 8005d2e:	480a      	ldr	r0, [pc, #40]	@ (8005d58 <MX_USB_DEVICE_Init+0x44>)
 8005d30:	f7fe fd22 	bl	8004778 <USBD_RegisterClass>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005d3a:	f7fa fcb3 	bl	80006a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d3e:	4806      	ldr	r0, [pc, #24]	@ (8005d58 <MX_USB_DEVICE_Init+0x44>)
 8005d40:	f7fe fd50 	bl	80047e4 <USBD_Start>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005d4a:	f7fa fcab 	bl	80006a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200000cc 	.word	0x200000cc
 8005d58:	20000144 	.word	0x20000144
 8005d5c:	2000000c 	.word	0x2000000c

08005d60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2212      	movs	r2, #18
 8005d70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d72:	4b03      	ldr	r3, [pc, #12]	@ (8005d80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	200000e8 	.word	0x200000e8

08005d84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	6039      	str	r1, [r7, #0]
 8005d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2204      	movs	r2, #4
 8005d94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d96:	4b03      	ldr	r3, [pc, #12]	@ (8005da4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	200000fc 	.word	0x200000fc

08005da8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	6039      	str	r1, [r7, #0]
 8005db2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	4907      	ldr	r1, [pc, #28]	@ (8005ddc <USBD_FS_ProductStrDescriptor+0x34>)
 8005dbe:	4808      	ldr	r0, [pc, #32]	@ (8005de0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005dc0:	f7ff fed6 	bl	8005b70 <USBD_GetString>
 8005dc4:	e004      	b.n	8005dd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	4904      	ldr	r1, [pc, #16]	@ (8005ddc <USBD_FS_ProductStrDescriptor+0x34>)
 8005dca:	4805      	ldr	r0, [pc, #20]	@ (8005de0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005dcc:	f7ff fed0 	bl	8005b70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005dd0:	4b02      	ldr	r3, [pc, #8]	@ (8005ddc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000420 	.word	0x20000420
 8005de0:	080065e0 	.word	0x080065e0

08005de4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	6039      	str	r1, [r7, #0]
 8005dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	4904      	ldr	r1, [pc, #16]	@ (8005e04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005df4:	4804      	ldr	r0, [pc, #16]	@ (8005e08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005df6:	f7ff febb 	bl	8005b70 <USBD_GetString>
  return USBD_StrDesc;
 8005dfa:	4b02      	ldr	r3, [pc, #8]	@ (8005e04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000420 	.word	0x20000420
 8005e08:	080065f8 	.word	0x080065f8

08005e0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	6039      	str	r1, [r7, #0]
 8005e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	221a      	movs	r2, #26
 8005e1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e1e:	f000 f843 	bl	8005ea8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e22:	4b02      	ldr	r3, [pc, #8]	@ (8005e2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20000100 	.word	0x20000100

08005e30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d105      	bne.n	8005e4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	4907      	ldr	r1, [pc, #28]	@ (8005e64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e46:	4808      	ldr	r0, [pc, #32]	@ (8005e68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e48:	f7ff fe92 	bl	8005b70 <USBD_GetString>
 8005e4c:	e004      	b.n	8005e58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4904      	ldr	r1, [pc, #16]	@ (8005e64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e52:	4805      	ldr	r0, [pc, #20]	@ (8005e68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e54:	f7ff fe8c 	bl	8005b70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e58:	4b02      	ldr	r3, [pc, #8]	@ (8005e64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000420 	.word	0x20000420
 8005e68:	0800660c 	.word	0x0800660c

08005e6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	6039      	str	r1, [r7, #0]
 8005e76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d105      	bne.n	8005e8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	4907      	ldr	r1, [pc, #28]	@ (8005ea0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e82:	4808      	ldr	r0, [pc, #32]	@ (8005ea4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e84:	f7ff fe74 	bl	8005b70 <USBD_GetString>
 8005e88:	e004      	b.n	8005e94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	4904      	ldr	r1, [pc, #16]	@ (8005ea0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e8e:	4805      	ldr	r0, [pc, #20]	@ (8005ea4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e90:	f7ff fe6e 	bl	8005b70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e94:	4b02      	ldr	r3, [pc, #8]	@ (8005ea0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000420 	.word	0x20000420
 8005ea4:	08006618 	.word	0x08006618

08005ea8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005eae:	4b0f      	ldr	r3, [pc, #60]	@ (8005eec <Get_SerialNum+0x44>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <Get_SerialNum+0x48>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005eba:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef4 <Get_SerialNum+0x4c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005ece:	2208      	movs	r2, #8
 8005ed0:	4909      	ldr	r1, [pc, #36]	@ (8005ef8 <Get_SerialNum+0x50>)
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f814 	bl	8005f00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005ed8:	2204      	movs	r2, #4
 8005eda:	4908      	ldr	r1, [pc, #32]	@ (8005efc <Get_SerialNum+0x54>)
 8005edc:	68b8      	ldr	r0, [r7, #8]
 8005ede:	f000 f80f 	bl	8005f00 <IntToUnicode>
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	1fff7a10 	.word	0x1fff7a10
 8005ef0:	1fff7a14 	.word	0x1fff7a14
 8005ef4:	1fff7a18 	.word	0x1fff7a18
 8005ef8:	20000102 	.word	0x20000102
 8005efc:	20000112 	.word	0x20000112

08005f00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]
 8005f16:	e027      	b.n	8005f68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	0f1b      	lsrs	r3, r3, #28
 8005f1c:	2b09      	cmp	r3, #9
 8005f1e:	d80b      	bhi.n	8005f38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	0f1b      	lsrs	r3, r3, #28
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	440b      	add	r3, r1
 8005f30:	3230      	adds	r2, #48	@ 0x30
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	e00a      	b.n	8005f4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	0f1b      	lsrs	r3, r3, #28
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	4619      	mov	r1, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	440b      	add	r3, r1
 8005f48:	3237      	adds	r2, #55	@ 0x37
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	3301      	adds	r3, #1
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	2200      	movs	r2, #0
 8005f60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	3301      	adds	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
 8005f68:	7dfa      	ldrb	r2, [r7, #23]
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d3d3      	bcc.n	8005f18 <IntToUnicode+0x18>
  }
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	@ 0x28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f88:	f107 0314 	add.w	r3, r7, #20
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fa0:	d13a      	bne.n	8006018 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8006020 <HAL_PCD_MspInit+0xa0>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005faa:	4a1d      	ldr	r2, [pc, #116]	@ (8006020 <HAL_PCD_MspInit+0xa0>)
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006020 <HAL_PCD_MspInit+0xa0>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005fbe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005fd0:	230a      	movs	r3, #10
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd4:	f107 0314 	add.w	r3, r7, #20
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4812      	ldr	r0, [pc, #72]	@ (8006024 <HAL_PCD_MspInit+0xa4>)
 8005fdc:	f7fa fdae 	bl	8000b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8006020 <HAL_PCD_MspInit+0xa0>)
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8006020 <HAL_PCD_MspInit+0xa0>)
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fea:	6353      	str	r3, [r2, #52]	@ 0x34
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <HAL_PCD_MspInit+0xa0>)
 8005ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8006020 <HAL_PCD_MspInit+0xa0>)
 8005ff6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ffa:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ffc:	4b08      	ldr	r3, [pc, #32]	@ (8006020 <HAL_PCD_MspInit+0xa0>)
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006008:	2200      	movs	r2, #0
 800600a:	2100      	movs	r1, #0
 800600c:	2043      	movs	r0, #67	@ 0x43
 800600e:	f7fa fd5e 	bl	8000ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006012:	2043      	movs	r0, #67	@ 0x43
 8006014:	f7fa fd77 	bl	8000b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006018:	bf00      	nop
 800601a:	3728      	adds	r7, #40	@ 0x28
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40023800 	.word	0x40023800
 8006024:	40020000 	.word	0x40020000

08006028 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800603c:	4619      	mov	r1, r3
 800603e:	4610      	mov	r0, r2
 8006040:	f7fe fc1d 	bl	800487e <USBD_LL_SetupStage>
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	4619      	mov	r1, r3
 8006076:	f7fe fc57 	bl	8004928 <USBD_LL_DataOutStage>
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	3320      	adds	r3, #32
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7fe fcf9 	bl	8004aa0 <USBD_LL_DataInStage>
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe fe3d 	bl	8004d44 <USBD_LL_SOF>
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	79db      	ldrb	r3, [r3, #7]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d001      	beq.n	80060ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80060e6:	f7fa fadd 	bl	80006a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80060f0:	7bfa      	ldrb	r2, [r7, #15]
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fe fde1 	bl	8004cbc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fd88 	bl	8004c16 <USBD_LL_Reset>
}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe fddc 	bl	8004cdc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	7adb      	ldrb	r3, [r3, #11]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006144:	4b04      	ldr	r3, [pc, #16]	@ (8006158 <HAL_PCD_SuspendCallback+0x48>)
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	4a03      	ldr	r2, [pc, #12]	@ (8006158 <HAL_PCD_SuspendCallback+0x48>)
 800614a:	f043 0306 	orr.w	r3, r3, #6
 800614e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	e000ed00 	.word	0xe000ed00

0800615c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fdd2 	bl	8004d14 <USBD_LL_Resume>
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	4611      	mov	r1, r2
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fe2a 	bl	8004de8 <USBD_LL_IsoOUTIncomplete>
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	4611      	mov	r1, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fde6 	bl	8004d84 <USBD_LL_IsoINIncomplete>
}
 80061b8:	bf00      	nop
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fe3c 	bl	8004e4c <USBD_LL_DevConnected>
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fe39 	bl	8004e62 <USBD_LL_DevDisconnected>
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d13c      	bne.n	8006282 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006208:	4a20      	ldr	r2, [pc, #128]	@ (800628c <USBD_LL_Init+0x94>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a1e      	ldr	r2, [pc, #120]	@ (800628c <USBD_LL_Init+0x94>)
 8006214:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006218:	4b1c      	ldr	r3, [pc, #112]	@ (800628c <USBD_LL_Init+0x94>)
 800621a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800621e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006220:	4b1a      	ldr	r3, [pc, #104]	@ (800628c <USBD_LL_Init+0x94>)
 8006222:	2204      	movs	r2, #4
 8006224:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006226:	4b19      	ldr	r3, [pc, #100]	@ (800628c <USBD_LL_Init+0x94>)
 8006228:	2202      	movs	r2, #2
 800622a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800622c:	4b17      	ldr	r3, [pc, #92]	@ (800628c <USBD_LL_Init+0x94>)
 800622e:	2200      	movs	r2, #0
 8006230:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006232:	4b16      	ldr	r3, [pc, #88]	@ (800628c <USBD_LL_Init+0x94>)
 8006234:	2202      	movs	r2, #2
 8006236:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006238:	4b14      	ldr	r3, [pc, #80]	@ (800628c <USBD_LL_Init+0x94>)
 800623a:	2200      	movs	r2, #0
 800623c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800623e:	4b13      	ldr	r3, [pc, #76]	@ (800628c <USBD_LL_Init+0x94>)
 8006240:	2200      	movs	r2, #0
 8006242:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006244:	4b11      	ldr	r3, [pc, #68]	@ (800628c <USBD_LL_Init+0x94>)
 8006246:	2200      	movs	r2, #0
 8006248:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800624a:	4b10      	ldr	r3, [pc, #64]	@ (800628c <USBD_LL_Init+0x94>)
 800624c:	2200      	movs	r2, #0
 800624e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006250:	4b0e      	ldr	r3, [pc, #56]	@ (800628c <USBD_LL_Init+0x94>)
 8006252:	2200      	movs	r2, #0
 8006254:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006256:	480d      	ldr	r0, [pc, #52]	@ (800628c <USBD_LL_Init+0x94>)
 8006258:	f7fa fe0c 	bl	8000e74 <HAL_PCD_Init>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006262:	f7fa fa1f 	bl	80006a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006266:	2180      	movs	r1, #128	@ 0x80
 8006268:	4808      	ldr	r0, [pc, #32]	@ (800628c <USBD_LL_Init+0x94>)
 800626a:	f7fc f820 	bl	80022ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800626e:	2240      	movs	r2, #64	@ 0x40
 8006270:	2100      	movs	r1, #0
 8006272:	4806      	ldr	r0, [pc, #24]	@ (800628c <USBD_LL_Init+0x94>)
 8006274:	f7fb ffd4 	bl	8002220 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006278:	2280      	movs	r2, #128	@ 0x80
 800627a:	2101      	movs	r1, #1
 800627c:	4803      	ldr	r0, [pc, #12]	@ (800628c <USBD_LL_Init+0x94>)
 800627e:	f7fb ffcf 	bl	8002220 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000620 	.word	0x20000620

08006290 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fa fef3 	bl	8001092 <HAL_PCD_Start>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f930 	bl	8006518 <USBD_Get_USB_Status>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	4608      	mov	r0, r1
 80062d0:	4611      	mov	r1, r2
 80062d2:	461a      	mov	r2, r3
 80062d4:	4603      	mov	r3, r0
 80062d6:	70fb      	strb	r3, [r7, #3]
 80062d8:	460b      	mov	r3, r1
 80062da:	70bb      	strb	r3, [r7, #2]
 80062dc:	4613      	mov	r3, r2
 80062de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80062ee:	78bb      	ldrb	r3, [r7, #2]
 80062f0:	883a      	ldrh	r2, [r7, #0]
 80062f2:	78f9      	ldrb	r1, [r7, #3]
 80062f4:	f7fb fbc7 	bl	8001a86 <HAL_PCD_EP_Open>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f90a 	bl	8006518 <USBD_Get_USB_Status>
 8006304:	4603      	mov	r3, r0
 8006306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006308:	7bbb      	ldrb	r3, [r7, #14]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800632c:	78fa      	ldrb	r2, [r7, #3]
 800632e:	4611      	mov	r1, r2
 8006330:	4618      	mov	r0, r3
 8006332:	f7fb fc12 	bl	8001b5a <HAL_PCD_EP_Close>
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	4618      	mov	r0, r3
 800633e:	f000 f8eb 	bl	8006518 <USBD_Get_USB_Status>
 8006342:	4603      	mov	r3, r0
 8006344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006346:	7bbb      	ldrb	r3, [r7, #14]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	4611      	mov	r1, r2
 800636e:	4618      	mov	r0, r3
 8006370:	f7fb fcb2 	bl	8001cd8 <HAL_PCD_EP_SetStall>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	4618      	mov	r0, r3
 800637c:	f000 f8cc 	bl	8006518 <USBD_Get_USB_Status>
 8006380:	4603      	mov	r3, r0
 8006382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006384:	7bbb      	ldrb	r3, [r7, #14]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	460b      	mov	r3, r1
 8006398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fb fcf6 	bl	8001d9e <HAL_PCD_EP_ClrStall>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 f8ad 	bl	8006518 <USBD_Get_USB_Status>
 80063be:	4603      	mov	r3, r0
 80063c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80063de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80063e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	da0b      	bge.n	8006400 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	4613      	mov	r3, r2
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	3316      	adds	r3, #22
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	e00b      	b.n	8006418 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006406:	68f9      	ldr	r1, [r7, #12]
 8006408:	4613      	mov	r3, r2
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	440b      	add	r3, r1
 8006412:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006416:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	4611      	mov	r1, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f7fb fafb 	bl	8001a3e <HAL_PCD_SetAddress>
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	4618      	mov	r0, r3
 8006450:	f000 f862 	bl	8006518 <USBD_Get_USB_Status>
 8006454:	4603      	mov	r3, r0
 8006456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006458:	7bbb      	ldrb	r3, [r7, #14]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b086      	sub	sp, #24
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	460b      	mov	r3, r1
 8006470:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006480:	7af9      	ldrb	r1, [r7, #11]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	f7fb fbed 	bl	8001c64 <HAL_PCD_EP_Transmit>
 800648a:	4603      	mov	r3, r0
 800648c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f841 	bl	8006518 <USBD_Get_USB_Status>
 8006496:	4603      	mov	r3, r0
 8006498:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800649a:	7dbb      	ldrb	r3, [r7, #22]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	460b      	mov	r3, r1
 80064b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80064c2:	7af9      	ldrb	r1, [r7, #11]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	f7fb fb91 	bl	8001bee <HAL_PCD_EP_Receive>
 80064cc:	4603      	mov	r3, r0
 80064ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 f820 	bl	8006518 <USBD_Get_USB_Status>
 80064d8:	4603      	mov	r3, r0
 80064da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80064f0:	4b03      	ldr	r3, [pc, #12]	@ (8006500 <USBD_static_malloc+0x18>)
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000b04 	.word	0x20000b04

08006504 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d817      	bhi.n	800655c <USBD_Get_USB_Status+0x44>
 800652c:	a201      	add	r2, pc, #4	@ (adr r2, 8006534 <USBD_Get_USB_Status+0x1c>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006545 	.word	0x08006545
 8006538:	0800654b 	.word	0x0800654b
 800653c:	08006551 	.word	0x08006551
 8006540:	08006557 	.word	0x08006557
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
    break;
 8006548:	e00b      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800654a:	2303      	movs	r3, #3
 800654c:	73fb      	strb	r3, [r7, #15]
    break;
 800654e:	e008      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
    break;
 8006554:	e005      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006556:	2303      	movs	r3, #3
 8006558:	73fb      	strb	r3, [r7, #15]
    break;
 800655a:	e002      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	73fb      	strb	r3, [r7, #15]
    break;
 8006560:	bf00      	nop
  }
  return usb_status;
 8006562:	7bfb      	ldrb	r3, [r7, #15]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <memset>:
 8006570:	4402      	add	r2, r0
 8006572:	4603      	mov	r3, r0
 8006574:	4293      	cmp	r3, r2
 8006576:	d100      	bne.n	800657a <memset+0xa>
 8006578:	4770      	bx	lr
 800657a:	f803 1b01 	strb.w	r1, [r3], #1
 800657e:	e7f9      	b.n	8006574 <memset+0x4>

08006580 <__libc_init_array>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	4d0d      	ldr	r5, [pc, #52]	@ (80065b8 <__libc_init_array+0x38>)
 8006584:	4c0d      	ldr	r4, [pc, #52]	@ (80065bc <__libc_init_array+0x3c>)
 8006586:	1b64      	subs	r4, r4, r5
 8006588:	10a4      	asrs	r4, r4, #2
 800658a:	2600      	movs	r6, #0
 800658c:	42a6      	cmp	r6, r4
 800658e:	d109      	bne.n	80065a4 <__libc_init_array+0x24>
 8006590:	4d0b      	ldr	r5, [pc, #44]	@ (80065c0 <__libc_init_array+0x40>)
 8006592:	4c0c      	ldr	r4, [pc, #48]	@ (80065c4 <__libc_init_array+0x44>)
 8006594:	f000 f818 	bl	80065c8 <_init>
 8006598:	1b64      	subs	r4, r4, r5
 800659a:	10a4      	asrs	r4, r4, #2
 800659c:	2600      	movs	r6, #0
 800659e:	42a6      	cmp	r6, r4
 80065a0:	d105      	bne.n	80065ae <__libc_init_array+0x2e>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a8:	4798      	blx	r3
 80065aa:	3601      	adds	r6, #1
 80065ac:	e7ee      	b.n	800658c <__libc_init_array+0xc>
 80065ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b2:	4798      	blx	r3
 80065b4:	3601      	adds	r6, #1
 80065b6:	e7f2      	b.n	800659e <__libc_init_array+0x1e>
 80065b8:	08006640 	.word	0x08006640
 80065bc:	08006640 	.word	0x08006640
 80065c0:	08006640 	.word	0x08006640
 80065c4:	08006644 	.word	0x08006644

080065c8 <_init>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	bf00      	nop
 80065cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ce:	bc08      	pop	{r3}
 80065d0:	469e      	mov	lr, r3
 80065d2:	4770      	bx	lr

080065d4 <_fini>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr
